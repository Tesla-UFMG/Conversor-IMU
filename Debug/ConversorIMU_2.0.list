
ConversorIMU_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ad4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  20000010  08002c24  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000017c  08002c24  0002017c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e8d1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000232a  00000000  00000000  0002e90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00007c2c  00000000  00000000  00030c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000009b8  00000000  00000000  00039270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017965  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000102db  00000000  00000000  0005158d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00085d0a  00000000  00000000  00061868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000e7572  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b6c  00000000  00000000  000e75c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bc8 	.word	0x08002bc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002bc8 	.word	0x08002bc8

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2iz>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000720:	d215      	bcs.n	800074e <__aeabi_d2iz+0x36>
 8000722:	d511      	bpl.n	8000748 <__aeabi_d2iz+0x30>
 8000724:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000728:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800072c:	d912      	bls.n	8000754 <__aeabi_d2iz+0x3c>
 800072e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000736:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	bf18      	it	ne
 8000744:	4240      	negne	r0, r0
 8000746:	4770      	bx	lr
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	4770      	bx	lr
 800074e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000752:	d105      	bne.n	8000760 <__aeabi_d2iz+0x48>
 8000754:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000758:	bf08      	it	eq
 800075a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075e:	4770      	bx	lr
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b510      	push	{r4, lr}
 800076a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_InitTick+0x40>)
 800076e:	7818      	ldrb	r0, [r3, #0]
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	fbb3 f3f0 	udiv	r3, r3, r0
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <HAL_InitTick+0x44>)
 800077a:	6810      	ldr	r0, [r2, #0]
 800077c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000780:	f000 fa7a 	bl	8000c78 <HAL_SYSTICK_Config>
 8000784:	b968      	cbnz	r0, 80007a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	2c0f      	cmp	r4, #15
 8000788:	d901      	bls.n	800078e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800078a:	2001      	movs	r0, #1
 800078c:	e00a      	b.n	80007a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078e:	2200      	movs	r2, #0
 8000790:	4621      	mov	r1, r4
 8000792:	f04f 30ff 	mov.w	r0, #4294967295
 8000796:	f000 fa2d 	bl	8000bf4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_InitTick+0x40>)
 800079c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800079e:	2000      	movs	r0, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80007a2:	2001      	movs	r0, #1
}
 80007a4:	bd10      	pop	{r4, pc}
 80007a6:	bf00      	nop
 80007a8:	20000000 	.word	0x20000000
 80007ac:	2000000c 	.word	0x2000000c

080007b0 <HAL_Init>:
{
 80007b0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x20>)
 80007b4:	6813      	ldr	r3, [r2, #0]
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 fa07 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ffd0 	bl	8000768 <HAL_InitTick>
  HAL_MspInit();
 80007c8:	f002 f91e 	bl	8002a08 <HAL_MspInit>
}
 80007cc:	2000      	movs	r0, #0
 80007ce:	bd08      	pop	{r3, pc}
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x10>)
 80007d6:	6811      	ldr	r1, [r2, #0]
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_IncTick+0x14>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	440b      	add	r3, r1
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000038 	.word	0x20000038
 80007e8:	20000000 	.word	0x20000000

080007ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007ec:	4b01      	ldr	r3, [pc, #4]	; (80007f4 <HAL_GetTick+0x8>)
 80007ee:	6818      	ldr	r0, [r3, #0]
}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000038 	.word	0x20000038

080007f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff fff6 	bl	80007ec <HAL_GetTick>
 8000800:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000802:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000806:	d002      	beq.n	800080e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_Delay+0x24>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080e:	f7ff ffed 	bl	80007ec <HAL_GetTick>
 8000812:	1b40      	subs	r0, r0, r5
 8000814:	42a0      	cmp	r0, r4
 8000816:	d3fa      	bcc.n	800080e <HAL_Delay+0x16>
  {
  }
}
 8000818:	bd38      	pop	{r3, r4, r5, pc}
 800081a:	bf00      	nop
 800081c:	20000000 	.word	0x20000000

08000820 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000820:	2800      	cmp	r0, #0
 8000822:	f000 80a1 	beq.w	8000968 <HAL_CAN_Init+0x148>
{
 8000826:	b538      	push	{r3, r4, r5, lr}
 8000828:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800082a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800082e:	b1d3      	cbz	r3, 8000866 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000830:	6822      	ldr	r2, [r4, #0]
 8000832:	6813      	ldr	r3, [r2, #0]
 8000834:	f023 0302 	bic.w	r3, r3, #2
 8000838:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800083a:	f7ff ffd7 	bl	80007ec <HAL_GetTick>
 800083e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	f012 0f02 	tst.w	r2, #2
 8000848:	d010      	beq.n	800086c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800084a:	f7ff ffcf 	bl	80007ec <HAL_GetTick>
 800084e:	1b40      	subs	r0, r0, r5
 8000850:	280a      	cmp	r0, #10
 8000852:	d9f5      	bls.n	8000840 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085a:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800085c:	2305      	movs	r3, #5
 800085e:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000862:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000864:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000866:	f001 ffa1 	bl	80027ac <HAL_CAN_MspInit>
 800086a:	e7e1      	b.n	8000830 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	f042 0201 	orr.w	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000874:	f7ff ffba 	bl	80007ec <HAL_GetTick>
 8000878:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	f012 0f01 	tst.w	r2, #1
 8000882:	d10d      	bne.n	80008a0 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000884:	f7ff ffb2 	bl	80007ec <HAL_GetTick>
 8000888:	1b40      	subs	r0, r0, r5
 800088a:	280a      	cmp	r0, #10
 800088c:	d9f5      	bls.n	800087a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800088e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000894:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000896:	2305      	movs	r3, #5
 8000898:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800089c:	2001      	movs	r0, #1
 800089e:	e7e1      	b.n	8000864 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008a0:	7e22      	ldrb	r2, [r4, #24]
 80008a2:	2a01      	cmp	r2, #1
 80008a4:	d03d      	beq.n	8000922 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ac:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80008ae:	7e63      	ldrb	r3, [r4, #25]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d03b      	beq.n	800092c <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b4:	6822      	ldr	r2, [r4, #0]
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008bc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008be:	7ea3      	ldrb	r3, [r4, #26]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d039      	beq.n	8000938 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c4:	6822      	ldr	r2, [r4, #0]
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	f023 0320 	bic.w	r3, r3, #32
 80008cc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ce:	7ee3      	ldrb	r3, [r4, #27]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d037      	beq.n	8000944 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d4:	6822      	ldr	r2, [r4, #0]
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008de:	7f23      	ldrb	r3, [r4, #28]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d035      	beq.n	8000950 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e4:	6822      	ldr	r2, [r4, #0]
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f023 0308 	bic.w	r3, r3, #8
 80008ec:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008ee:	7f63      	ldrb	r3, [r4, #29]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d033      	beq.n	800095c <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f4:	6822      	ldr	r2, [r4, #0]
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f023 0304 	bic.w	r3, r3, #4
 80008fc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008fe:	68a3      	ldr	r3, [r4, #8]
 8000900:	68e2      	ldr	r2, [r4, #12]
 8000902:	4313      	orrs	r3, r2
 8000904:	6922      	ldr	r2, [r4, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	6962      	ldr	r2, [r4, #20]
 800090a:	4313      	orrs	r3, r2
 800090c:	6862      	ldr	r2, [r4, #4]
 800090e:	3a01      	subs	r2, #1
 8000910:	6821      	ldr	r1, [r4, #0]
 8000912:	4313      	orrs	r3, r2
 8000914:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000916:	2000      	movs	r0, #0
 8000918:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800091a:	2301      	movs	r3, #1
 800091c:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000920:	e7a0      	b.n	8000864 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e7c0      	b.n	80008ae <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800092c:	6822      	ldr	r2, [r4, #0]
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e7c2      	b.n	80008be <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000938:	6822      	ldr	r2, [r4, #0]
 800093a:	6813      	ldr	r3, [r2, #0]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	e7c4      	b.n	80008ce <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000944:	6822      	ldr	r2, [r4, #0]
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	f023 0310 	bic.w	r3, r3, #16
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e7c6      	b.n	80008de <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000950:	6822      	ldr	r2, [r4, #0]
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	e7c8      	b.n	80008ee <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800095c:	6822      	ldr	r2, [r4, #0]
 800095e:	6813      	ldr	r3, [r2, #0]
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6013      	str	r3, [r2, #0]
 8000966:	e7ca      	b.n	80008fe <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
}
 800096a:	4770      	bx	lr

0800096c <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800096c:	4770      	bx	lr

0800096e <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800096e:	4770      	bx	lr

08000970 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000970:	4770      	bx	lr

08000972 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000972:	4770      	bx	lr

08000974 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000974:	4770      	bx	lr

08000976 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000976:	4770      	bx	lr

08000978 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000978:	4770      	bx	lr

0800097a <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800097a:	4770      	bx	lr

0800097c <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800097c:	4770      	bx	lr

0800097e <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800097e:	4770      	bx	lr

08000980 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000980:	4770      	bx	lr

08000982 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000982:	4770      	bx	lr

08000984 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000984:	4770      	bx	lr

08000986 <HAL_CAN_IRQHandler>:
{
 8000986:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800098a:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800098c:	6803      	ldr	r3, [r0, #0]
 800098e:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000990:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000994:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000996:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800099a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800099e:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80009a2:	f014 0601 	ands.w	r6, r4, #1
 80009a6:	d03b      	beq.n	8000a20 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80009a8:	f017 0601 	ands.w	r6, r7, #1
 80009ac:	d016      	beq.n	80009dc <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80009ae:	2201      	movs	r2, #1
 80009b0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80009b2:	f017 0f02 	tst.w	r7, #2
 80009b6:	d108      	bne.n	80009ca <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80009b8:	f017 0f04 	tst.w	r7, #4
 80009bc:	d10c      	bne.n	80009d8 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80009be:	f017 0608 	ands.w	r6, r7, #8
 80009c2:	d006      	beq.n	80009d2 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80009c4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80009c8:	e008      	b.n	80009dc <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80009ca:	f7ff ffcf 	bl	800096c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80009ce:	2600      	movs	r6, #0
 80009d0:	e004      	b.n	80009dc <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80009d2:	f7ff ffce 	bl	8000972 <HAL_CAN_TxMailbox0AbortCallback>
 80009d6:	e001      	b.n	80009dc <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80009d8:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009dc:	f417 7f80 	tst.w	r7, #256	; 0x100
 80009e0:	d00d      	beq.n	80009fe <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009e2:	682b      	ldr	r3, [r5, #0]
 80009e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009ea:	f417 7f00 	tst.w	r7, #512	; 0x200
 80009ee:	f040 8086 	bne.w	8000afe <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80009f2:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80009f6:	f000 8086 	beq.w	8000b06 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80009fa:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009fe:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a02:	d00d      	beq.n	8000a20 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a0a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a0c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000a10:	f040 8083 	bne.w	8000b1a <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a14:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8000a18:	f000 8083 	beq.w	8000b22 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a1c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a20:	f014 0f08 	tst.w	r4, #8
 8000a24:	d007      	beq.n	8000a36 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a26:	f01b 0f10 	tst.w	fp, #16
 8000a2a:	d004      	beq.n	8000a36 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a2c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	2210      	movs	r2, #16
 8000a34:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a36:	f014 0f04 	tst.w	r4, #4
 8000a3a:	d002      	beq.n	8000a42 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a3c:	f01b 0f08 	tst.w	fp, #8
 8000a40:	d179      	bne.n	8000b36 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a42:	f014 0f02 	tst.w	r4, #2
 8000a46:	d004      	beq.n	8000a52 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	f013 0f03 	tst.w	r3, #3
 8000a50:	d178      	bne.n	8000b44 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a52:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000a56:	d007      	beq.n	8000a68 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000a58:	f01a 0f10 	tst.w	sl, #16
 8000a5c:	d004      	beq.n	8000a68 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a5e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	2210      	movs	r2, #16
 8000a66:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a68:	f014 0f20 	tst.w	r4, #32
 8000a6c:	d002      	beq.n	8000a74 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a6e:	f01a 0f08 	tst.w	sl, #8
 8000a72:	d16b      	bne.n	8000b4c <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a74:	f014 0f10 	tst.w	r4, #16
 8000a78:	d004      	beq.n	8000a84 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a7a:	682b      	ldr	r3, [r5, #0]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	f013 0f03 	tst.w	r3, #3
 8000a82:	d16a      	bne.n	8000b5a <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a84:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000a88:	d002      	beq.n	8000a90 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a8a:	f018 0f10 	tst.w	r8, #16
 8000a8e:	d168      	bne.n	8000b62 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a90:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000a94:	d002      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a96:	f018 0f08 	tst.w	r8, #8
 8000a9a:	d169      	bne.n	8000b70 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a9c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000aa0:	d07a      	beq.n	8000b98 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000aa2:	f018 0f04 	tst.w	r8, #4
 8000aa6:	d074      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000aa8:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000aac:	d004      	beq.n	8000ab8 <HAL_CAN_IRQHandler+0x132>
 8000aae:	f019 0f01 	tst.w	r9, #1
 8000ab2:	d001      	beq.n	8000ab8 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ab4:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ab8:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000abc:	d004      	beq.n	8000ac8 <HAL_CAN_IRQHandler+0x142>
 8000abe:	f019 0f02 	tst.w	r9, #2
 8000ac2:	d001      	beq.n	8000ac8 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ac4:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ac8:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000acc:	d004      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x152>
 8000ace:	f019 0f04 	tst.w	r9, #4
 8000ad2:	d001      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ad4:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ad8:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000adc:	d059      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x20c>
 8000ade:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8000ae2:	d056      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8000ae4:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8000ae8:	d065      	beq.n	8000bb6 <HAL_CAN_IRQHandler+0x230>
 8000aea:	d858      	bhi.n	8000b9e <HAL_CAN_IRQHandler+0x218>
 8000aec:	f1b9 0f20 	cmp.w	r9, #32
 8000af0:	d05e      	beq.n	8000bb0 <HAL_CAN_IRQHandler+0x22a>
 8000af2:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8000af6:	d142      	bne.n	8000b7e <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000af8:	f046 0620 	orr.w	r6, r6, #32
            break;
 8000afc:	e044      	b.n	8000b88 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000afe:	4628      	mov	r0, r5
 8000b00:	f7ff ff35 	bl	800096e <HAL_CAN_TxMailbox1CompleteCallback>
 8000b04:	e77b      	b.n	80009fe <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b06:	f417 6f00 	tst.w	r7, #2048	; 0x800
 8000b0a:	d002      	beq.n	8000b12 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b0c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b10:	e775      	b.n	80009fe <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b12:	4628      	mov	r0, r5
 8000b14:	f7ff ff2e 	bl	8000974 <HAL_CAN_TxMailbox1AbortCallback>
 8000b18:	e771      	b.n	80009fe <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	f7ff ff28 	bl	8000970 <HAL_CAN_TxMailbox2CompleteCallback>
 8000b20:	e77e      	b.n	8000a20 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b22:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8000b26:	d002      	beq.n	8000b2e <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b28:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000b2c:	e778      	b.n	8000a20 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f7ff ff21 	bl	8000976 <HAL_CAN_TxMailbox2AbortCallback>
 8000b34:	e774      	b.n	8000a20 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b36:	682b      	ldr	r3, [r5, #0]
 8000b38:	2208      	movs	r2, #8
 8000b3a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f7ff ff1c 	bl	800097a <HAL_CAN_RxFifo0FullCallback>
 8000b42:	e77e      	b.n	8000a42 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000b44:	4628      	mov	r0, r5
 8000b46:	f7ff ff17 	bl	8000978 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000b4a:	e782      	b.n	8000a52 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b4c:	682b      	ldr	r3, [r5, #0]
 8000b4e:	2208      	movs	r2, #8
 8000b50:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b52:	4628      	mov	r0, r5
 8000b54:	f7ff ff13 	bl	800097e <HAL_CAN_RxFifo1FullCallback>
 8000b58:	e78c      	b.n	8000a74 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f7ff ff0e 	bl	800097c <HAL_CAN_RxFifo1MsgPendingCallback>
 8000b60:	e790      	b.n	8000a84 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	2210      	movs	r2, #16
 8000b66:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f7ff ff09 	bl	8000980 <HAL_CAN_SleepCallback>
 8000b6e:	e78f      	b.n	8000a90 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b70:	682b      	ldr	r3, [r5, #0]
 8000b72:	2208      	movs	r2, #8
 8000b74:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b76:	4628      	mov	r0, r5
 8000b78:	f7ff ff03 	bl	8000982 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000b7c:	e78e      	b.n	8000a9c <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000b7e:	f1b9 0f10 	cmp.w	r9, #16
 8000b82:	d101      	bne.n	8000b88 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b84:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b88:	682a      	ldr	r2, [r5, #0]
 8000b8a:	6993      	ldr	r3, [r2, #24]
 8000b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b90:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b92:	682b      	ldr	r3, [r5, #0]
 8000b94:	2204      	movs	r2, #4
 8000b96:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b98:	b99e      	cbnz	r6, 8000bc2 <HAL_CAN_IRQHandler+0x23c>
}
 8000b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8000b9e:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000ba2:	d00b      	beq.n	8000bbc <HAL_CAN_IRQHandler+0x236>
 8000ba4:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 8000ba8:	d1ee      	bne.n	8000b88 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000baa:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000bae:	e7eb      	b.n	8000b88 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bb0:	f046 0610 	orr.w	r6, r6, #16
            break;
 8000bb4:	e7e8      	b.n	8000b88 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8000bb6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000bba:	e7e5      	b.n	8000b88 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8000bbc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000bc0:	e7e2      	b.n	8000b88 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000bc4:	431e      	orrs	r6, r3
 8000bc6:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f7ff fedb 	bl	8000984 <HAL_CAN_ErrorCallback>
}
 8000bce:	e7e4      	b.n	8000b9a <HAL_CAN_IRQHandler+0x214>

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bd2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bd8:	041b      	lsls	r3, r3, #16
 8000bda:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	0200      	lsls	r0, r0, #8
 8000bde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_NVIC_SetPriority+0x60>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfe:	f1c3 0407 	rsb	r4, r3, #7
 8000c02:	2c04      	cmp	r4, #4
 8000c04:	bf28      	it	cs
 8000c06:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c08:	1d1d      	adds	r5, r3, #4
 8000c0a:	2d06      	cmp	r5, #6
 8000c0c:	d918      	bls.n	8000c40 <HAL_NVIC_SetPriority+0x4c>
 8000c0e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 35ff 	mov.w	r5, #4294967295
 8000c14:	fa05 f404 	lsl.w	r4, r5, r4
 8000c18:	ea21 0104 	bic.w	r1, r1, r4
 8000c1c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1e:	fa05 f303 	lsl.w	r3, r5, r3
 8000c22:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c26:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	db0b      	blt.n	8000c44 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	0109      	lsls	r1, r1, #4
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c34:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c38:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c3c:	bc30      	pop	{r4, r5}
 8000c3e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c40:	2300      	movs	r3, #0
 8000c42:	e7e5      	b.n	8000c10 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	f000 000f 	and.w	r0, r0, #15
 8000c48:	0109      	lsls	r1, r1, #4
 8000c4a:	b2c9      	uxtb	r1, r1
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <HAL_NVIC_SetPriority+0x64>)
 8000c4e:	5419      	strb	r1, [r3, r0]
 8000c50:	e7f4      	b.n	8000c3c <HAL_NVIC_SetPriority+0x48>
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	e000ed14 	.word	0xe000ed14

08000c5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	db07      	blt.n	8000c70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c60:	f000 021f 	and.w	r2, r0, #31
 8000c64:	0940      	lsrs	r0, r0, #5
 8000c66:	2301      	movs	r3, #1
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	4a02      	ldr	r2, [pc, #8]	; (8000c74 <HAL_NVIC_EnableIRQ+0x18>)
 8000c6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	3801      	subs	r0, #1
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d20a      	bcs.n	8000c96 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_SYSTICK_Config+0x24>)
 8000c82:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_SYSTICK_Config+0x28>)
 8000c86:	21f0      	movs	r1, #240	; 0xf0
 8000c88:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b4f0      	push	{r4, r5, r6, r7}
 8000ca6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ca8:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000caa:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cac:	e0a3      	b.n	8000df6 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cae:	4f7f      	ldr	r7, [pc, #508]	; (8000eac <HAL_GPIO_Init+0x208>)
 8000cb0:	42bb      	cmp	r3, r7
 8000cb2:	d010      	beq.n	8000cd6 <HAL_GPIO_Init+0x32>
 8000cb4:	d907      	bls.n	8000cc6 <HAL_GPIO_Init+0x22>
 8000cb6:	4f7e      	ldr	r7, [pc, #504]	; (8000eb0 <HAL_GPIO_Init+0x20c>)
 8000cb8:	42bb      	cmp	r3, r7
 8000cba:	d00c      	beq.n	8000cd6 <HAL_GPIO_Init+0x32>
 8000cbc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cc0:	42bb      	cmp	r3, r7
 8000cc2:	d008      	beq.n	8000cd6 <HAL_GPIO_Init+0x32>
 8000cc4:	e013      	b.n	8000cee <HAL_GPIO_Init+0x4a>
 8000cc6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cca:	42bb      	cmp	r3, r7
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x32>
 8000cce:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000cd2:	42bb      	cmp	r3, r7
 8000cd4:	d107      	bne.n	8000ce6 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cd6:	688b      	ldr	r3, [r1, #8]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d058      	beq.n	8000d8e <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d051      	beq.n	8000d84 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000ce0:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce2:	2508      	movs	r5, #8
 8000ce4:	e003      	b.n	8000cee <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000ce6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cea:	42bb      	cmp	r3, r7
 8000cec:	d0f3      	beq.n	8000cd6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cee:	2eff      	cmp	r6, #255	; 0xff
 8000cf0:	d84f      	bhi.n	8000d92 <HAL_GPIO_Init+0xee>
 8000cf2:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf4:	2eff      	cmp	r6, #255	; 0xff
 8000cf6:	d84f      	bhi.n	8000d98 <HAL_GPIO_Init+0xf4>
 8000cf8:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cfa:	f8dc 3000 	ldr.w	r3, [ip]
 8000cfe:	270f      	movs	r7, #15
 8000d00:	4097      	lsls	r7, r2
 8000d02:	ea23 0307 	bic.w	r3, r3, r7
 8000d06:	fa05 f202 	lsl.w	r2, r5, r2
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d10:	684b      	ldr	r3, [r1, #4]
 8000d12:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d16:	d06d      	beq.n	8000df4 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d18:	4b66      	ldr	r3, [pc, #408]	; (8000eb4 <HAL_GPIO_Init+0x210>)
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	f042 0201 	orr.w	r2, r2, #1
 8000d20:	619a      	str	r2, [r3, #24]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	9301      	str	r3, [sp, #4]
 8000d2a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000d2c:	08a2      	lsrs	r2, r4, #2
 8000d2e:	1c97      	adds	r7, r2, #2
 8000d30:	4b61      	ldr	r3, [pc, #388]	; (8000eb8 <HAL_GPIO_Init+0x214>)
 8000d32:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	f004 0703 	and.w	r7, r4, #3
 8000d3a:	00bf      	lsls	r7, r7, #2
 8000d3c:	f04f 0c0f 	mov.w	ip, #15
 8000d40:	fa0c fc07 	lsl.w	ip, ip, r7
 8000d44:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d48:	4b5c      	ldr	r3, [pc, #368]	; (8000ebc <HAL_GPIO_Init+0x218>)
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d02a      	beq.n	8000da4 <HAL_GPIO_Init+0x100>
 8000d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d52:	4298      	cmp	r0, r3
 8000d54:	f000 808a 	beq.w	8000e6c <HAL_GPIO_Init+0x1c8>
 8000d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f000 8087 	beq.w	8000e70 <HAL_GPIO_Init+0x1cc>
 8000d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d01a      	beq.n	8000da0 <HAL_GPIO_Init+0xfc>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	e01b      	b.n	8000da6 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d6e:	68cd      	ldr	r5, [r1, #12]
          break;
 8000d70:	e7bd      	b.n	8000cee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d72:	68cd      	ldr	r5, [r1, #12]
 8000d74:	3504      	adds	r5, #4
          break;
 8000d76:	e7ba      	b.n	8000cee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d78:	68cd      	ldr	r5, [r1, #12]
 8000d7a:	3508      	adds	r5, #8
          break;
 8000d7c:	e7b7      	b.n	8000cee <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d7e:	68cd      	ldr	r5, [r1, #12]
 8000d80:	350c      	adds	r5, #12
          break;
 8000d82:	e7b4      	b.n	8000cee <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000d84:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d86:	2508      	movs	r5, #8
 8000d88:	e7b1      	b.n	8000cee <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	e7af      	b.n	8000cee <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8e:	2504      	movs	r5, #4
 8000d90:	e7ad      	b.n	8000cee <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d92:	f100 0c04 	add.w	ip, r0, #4
 8000d96:	e7ad      	b.n	8000cf4 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d98:	f1a4 0208 	sub.w	r2, r4, #8
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	e7ac      	b.n	8000cfa <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da0:	2303      	movs	r3, #3
 8000da2:	e000      	b.n	8000da6 <HAL_GPIO_Init+0x102>
 8000da4:	2300      	movs	r3, #0
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000dac:	3202      	adds	r2, #2
 8000dae:	4f42      	ldr	r7, [pc, #264]	; (8000eb8 <HAL_GPIO_Init+0x214>)
 8000db0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db4:	684b      	ldr	r3, [r1, #4]
 8000db6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dba:	d05b      	beq.n	8000e74 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4a40      	ldr	r2, [pc, #256]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000dbe:	6813      	ldr	r3, [r2, #0]
 8000dc0:	4333      	orrs	r3, r6
 8000dc2:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	684b      	ldr	r3, [r1, #4]
 8000dc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dca:	d059      	beq.n	8000e80 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dcc:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000dce:	6853      	ldr	r3, [r2, #4]
 8000dd0:	4333      	orrs	r3, r6
 8000dd2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd4:	684b      	ldr	r3, [r1, #4]
 8000dd6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000dda:	d057      	beq.n	8000e8c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ddc:	4a38      	ldr	r2, [pc, #224]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000dde:	6893      	ldr	r3, [r2, #8]
 8000de0:	4333      	orrs	r3, r6
 8000de2:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de4:	684b      	ldr	r3, [r1, #4]
 8000de6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000dea:	d055      	beq.n	8000e98 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4a34      	ldr	r2, [pc, #208]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000dee:	68d3      	ldr	r3, [r2, #12]
 8000df0:	431e      	orrs	r6, r3
 8000df2:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000df4:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	680b      	ldr	r3, [r1, #0]
 8000df8:	fa33 f204 	lsrs.w	r2, r3, r4
 8000dfc:	d052      	beq.n	8000ea4 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000e06:	ea32 0303 	bics.w	r3, r2, r3
 8000e0a:	d1f3      	bne.n	8000df4 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000e0c:	684b      	ldr	r3, [r1, #4]
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	f63f af4d 	bhi.w	8000cae <HAL_GPIO_Init+0xa>
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	f63f af6a 	bhi.w	8000cee <HAL_GPIO_Init+0x4a>
 8000e1a:	a701      	add	r7, pc, #4	; (adr r7, 8000e20 <HAL_GPIO_Init+0x17c>)
 8000e1c:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000e20:	08000cd7 	.word	0x08000cd7
 8000e24:	08000d6f 	.word	0x08000d6f
 8000e28:	08000d79 	.word	0x08000d79
 8000e2c:	08000d8b 	.word	0x08000d8b
 8000e30:	08000cef 	.word	0x08000cef
 8000e34:	08000cef 	.word	0x08000cef
 8000e38:	08000cef 	.word	0x08000cef
 8000e3c:	08000cef 	.word	0x08000cef
 8000e40:	08000cef 	.word	0x08000cef
 8000e44:	08000cef 	.word	0x08000cef
 8000e48:	08000cef 	.word	0x08000cef
 8000e4c:	08000cef 	.word	0x08000cef
 8000e50:	08000cef 	.word	0x08000cef
 8000e54:	08000cef 	.word	0x08000cef
 8000e58:	08000cef 	.word	0x08000cef
 8000e5c:	08000cef 	.word	0x08000cef
 8000e60:	08000cef 	.word	0x08000cef
 8000e64:	08000d73 	.word	0x08000d73
 8000e68:	08000d7f 	.word	0x08000d7f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e79a      	b.n	8000da6 <HAL_GPIO_Init+0x102>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e798      	b.n	8000da6 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000e76:	6813      	ldr	r3, [r2, #0]
 8000e78:	ea23 0306 	bic.w	r3, r3, r6
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e7a1      	b.n	8000dc4 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000e82:	6853      	ldr	r3, [r2, #4]
 8000e84:	ea23 0306 	bic.w	r3, r3, r6
 8000e88:	6053      	str	r3, [r2, #4]
 8000e8a:	e7a3      	b.n	8000dd4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000e8e:	6893      	ldr	r3, [r2, #8]
 8000e90:	ea23 0306 	bic.w	r3, r3, r6
 8000e94:	6093      	str	r3, [r2, #8]
 8000e96:	e7a5      	b.n	8000de4 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e98:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_GPIO_Init+0x21c>)
 8000e9a:	68d3      	ldr	r3, [r2, #12]
 8000e9c:	ea23 0606 	bic.w	r6, r3, r6
 8000ea0:	60d6      	str	r6, [r2, #12]
 8000ea2:	e7a7      	b.n	8000df4 <HAL_GPIO_Init+0x150>
  }
}
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	10220000 	.word	0x10220000
 8000eb0:	10310000 	.word	0x10310000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec4:	b10a      	cbz	r2, 8000eca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	6101      	str	r1, [r0, #16]
 8000ec8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eca:	0409      	lsls	r1, r1, #16
 8000ecc:	6101      	str	r1, [r0, #16]
  }
}
 8000ece:	4770      	bx	lr

08000ed0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ed0:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed2:	ea01 0203 	and.w	r2, r1, r3
 8000ed6:	ea21 0103 	bic.w	r1, r1, r3
 8000eda:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ede:	6101      	str	r1, [r0, #16]
}
 8000ee0:	4770      	bx	lr

08000ee2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ee2:	6803      	ldr	r3, [r0, #0]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000eea:	d101      	bne.n	8000ef0 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
}
 8000eee:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ef0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000ef4:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000efa:	2220      	movs	r2, #32
 8000efc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f00:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000f04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f06:	f042 0204 	orr.w	r2, r2, #4
 8000f0a:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8000f0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000f10:	2001      	movs	r0, #1
 8000f12:	4770      	bx	lr

08000f14 <I2C_WaitOnFlagUntilTimeout>:
{
 8000f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f18:	4607      	mov	r7, r0
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	4690      	mov	r8, r2
 8000f1e:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f20:	e022      	b.n	8000f68 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f22:	f7ff fc63 	bl	80007ec <HAL_GetTick>
 8000f26:	9b06      	ldr	r3, [sp, #24]
 8000f28:	1ac0      	subs	r0, r0, r3
 8000f2a:	42b0      	cmp	r0, r6
 8000f2c:	d800      	bhi.n	8000f30 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000f2e:	b9de      	cbnz	r6, 8000f68 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000f34:	2220      	movs	r2, #32
 8000f36:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000f3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f40:	f042 0220 	orr.w	r2, r2, #32
 8000f44:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000f46:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e01a      	b.n	8000f84 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	699c      	ldr	r4, [r3, #24]
 8000f52:	ea25 0404 	bic.w	r4, r5, r4
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	fab4 f484 	clz	r4, r4
 8000f5c:	0964      	lsrs	r4, r4, #5
 8000f5e:	45a0      	cmp	r8, r4
 8000f60:	d10f      	bne.n	8000f82 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8000f62:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000f66:	d1dc      	bne.n	8000f22 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000f68:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1ee      	bne.n	8000f4e <I2C_WaitOnFlagUntilTimeout+0x3a>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	695c      	ldr	r4, [r3, #20]
 8000f74:	ea25 0404 	bic.w	r4, r5, r4
 8000f78:	b2a4      	uxth	r4, r4
 8000f7a:	fab4 f484 	clz	r4, r4
 8000f7e:	0964      	lsrs	r4, r4, #5
 8000f80:	e7ed      	b.n	8000f5e <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8000f82:	2000      	movs	r0, #0
}
 8000f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f8c:	4605      	mov	r5, r0
 8000f8e:	460e      	mov	r6, r1
 8000f90:	4617      	mov	r7, r2
 8000f92:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000f94:	e03d      	b.n	8001012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f9c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f9e:	682b      	ldr	r3, [r5, #0]
 8000fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000fa4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000faa:	2220      	movs	r2, #32
 8000fac:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fb0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000fb4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000fb6:	f042 0204 	orr.w	r2, r2, #4
 8000fba:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000fbc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	e034      	b.n	800102e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fc4:	f7ff fc12 	bl	80007ec <HAL_GetTick>
 8000fc8:	eba0 0008 	sub.w	r0, r0, r8
 8000fcc:	42b8      	cmp	r0, r7
 8000fce:	d800      	bhi.n	8000fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8000fd0:	b9ff      	cbnz	r7, 8001012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fdc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fe0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000fe2:	f042 0220 	orr.w	r2, r2, #32
 8000fe6:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000fe8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e01e      	b.n	800102e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	699c      	ldr	r4, [r3, #24]
 8000ff4:	ea26 0404 	bic.w	r4, r6, r4
 8000ff8:	b2a4      	uxth	r4, r4
 8000ffa:	3c00      	subs	r4, #0
 8000ffc:	bf18      	it	ne
 8000ffe:	2401      	movne	r4, #1
 8001000:	b1a4      	cbz	r4, 800102c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001002:	682b      	ldr	r3, [r5, #0]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800100a:	d1c4      	bne.n	8000f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800100c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8001010:	d1d8      	bne.n	8000fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001012:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8001016:	2b01      	cmp	r3, #1
 8001018:	d1ea      	bne.n	8000ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	695c      	ldr	r4, [r3, #20]
 800101e:	ea26 0404 	bic.w	r4, r6, r4
 8001022:	b2a4      	uxth	r4, r4
 8001024:	3c00      	subs	r4, #0
 8001026:	bf18      	it	ne
 8001028:	2401      	movne	r4, #1
 800102a:	e7e9      	b.n	8001000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800102c:	2000      	movs	r0, #0
}
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001034 <I2C_MasterRequestWrite>:
{
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	4604      	mov	r4, r0
 800103a:	460d      	mov	r5, r1
 800103c:	4616      	mov	r6, r2
 800103e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001040:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001042:	2b08      	cmp	r3, #8
 8001044:	d00d      	beq.n	8001062 <I2C_MasterRequestWrite+0x2e>
 8001046:	2b01      	cmp	r3, #1
 8001048:	d00b      	beq.n	8001062 <I2C_MasterRequestWrite+0x2e>
 800104a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800104e:	d008      	beq.n	8001062 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001050:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001052:	2b12      	cmp	r3, #18
 8001054:	d10a      	bne.n	800106c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001056:	6802      	ldr	r2, [r0, #0]
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e004      	b.n	800106c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800106c:	9700      	str	r7, [sp, #0]
 800106e:	4633      	mov	r3, r6
 8001070:	2200      	movs	r2, #0
 8001072:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001076:	4620      	mov	r0, r4
 8001078:	f7ff ff4c 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 800107c:	b980      	cbnz	r0, 80010a0 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800107e:	6923      	ldr	r3, [r4, #16]
 8001080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001084:	d116      	bne.n	80010b4 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800108c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4632      	mov	r2, r6
 8001092:	4913      	ldr	r1, [pc, #76]	; (80010e0 <I2C_MasterRequestWrite+0xac>)
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff ff77 	bl	8000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800109a:	b9f8      	cbnz	r0, 80010dc <I2C_MasterRequestWrite+0xa8>
}
 800109c:	b003      	add	sp, #12
 800109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010a8:	d002      	beq.n	80010b0 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80010aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ae:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80010b0:	2003      	movs	r0, #3
 80010b2:	e7f3      	b.n	800109c <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010b4:	11eb      	asrs	r3, r5, #7
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	f003 0306 	and.w	r3, r3, #6
 80010bc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80010c0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4632      	mov	r2, r6
 80010c6:	4907      	ldr	r1, [pc, #28]	; (80010e4 <I2C_MasterRequestWrite+0xb0>)
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff ff5d 	bl	8000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010ce:	b918      	cbnz	r0, 80010d8 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	b2ed      	uxtb	r5, r5
 80010d4:	611d      	str	r5, [r3, #16]
 80010d6:	e7da      	b.n	800108e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
 80010da:	e7df      	b.n	800109c <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
 80010de:	e7dd      	b.n	800109c <I2C_MasterRequestWrite+0x68>
 80010e0:	00010002 	.word	0x00010002
 80010e4:	00010008 	.word	0x00010008

080010e8 <I2C_MasterRequestRead>:
{
 80010e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	4604      	mov	r4, r0
 80010f0:	460d      	mov	r5, r1
 80010f2:	4616      	mov	r6, r2
 80010f4:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80010f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010f8:	6801      	ldr	r1, [r0, #0]
 80010fa:	680b      	ldr	r3, [r1, #0]
 80010fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001100:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001102:	2a08      	cmp	r2, #8
 8001104:	d00d      	beq.n	8001122 <I2C_MasterRequestRead+0x3a>
 8001106:	2a01      	cmp	r2, #1
 8001108:	d00b      	beq.n	8001122 <I2C_MasterRequestRead+0x3a>
 800110a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800110e:	d008      	beq.n	8001122 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001110:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001112:	2b11      	cmp	r3, #17
 8001114:	d10a      	bne.n	800112c <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001116:	6802      	ldr	r2, [r0, #0]
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e004      	b.n	800112c <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001122:	6822      	ldr	r2, [r4, #0]
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800112c:	9700      	str	r7, [sp, #0]
 800112e:	4633      	mov	r3, r6
 8001130:	2200      	movs	r2, #0
 8001132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001136:	4620      	mov	r0, r4
 8001138:	f7ff feec 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 800113c:	b998      	cbnz	r0, 8001166 <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800113e:	6923      	ldr	r3, [r4, #16]
 8001140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001144:	d119      	bne.n	800117a <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	f045 0501 	orr.w	r5, r5, #1
 800114c:	b2ed      	uxtb	r5, r5
 800114e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4632      	mov	r2, r6
 8001154:	492a      	ldr	r1, [pc, #168]	; (8001200 <I2C_MasterRequestRead+0x118>)
 8001156:	4620      	mov	r0, r4
 8001158:	f7ff ff16 	bl	8000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800115c:	2800      	cmp	r0, #0
 800115e:	d14c      	bne.n	80011fa <I2C_MasterRequestRead+0x112>
}
 8001160:	b004      	add	sp, #16
 8001162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800116e:	d002      	beq.n	8001176 <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001174:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001176:	2003      	movs	r0, #3
 8001178:	e7f2      	b.n	8001160 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800117a:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800117e:	f008 0806 	and.w	r8, r8, #6
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001188:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	4632      	mov	r2, r6
 800118e:	491d      	ldr	r1, [pc, #116]	; (8001204 <I2C_MasterRequestRead+0x11c>)
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff fef9 	bl	8000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001196:	b108      	cbz	r0, 800119c <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 8001198:	2001      	movs	r0, #1
 800119a:	e7e1      	b.n	8001160 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	b2ed      	uxtb	r5, r5
 80011a0:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4632      	mov	r2, r6
 80011a6:	4916      	ldr	r1, [pc, #88]	; (8001200 <I2C_MasterRequestRead+0x118>)
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff feed 	bl	8000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011ae:	b108      	cbz	r0, 80011b4 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 80011b0:	2001      	movs	r0, #1
 80011b2:	e7d5      	b.n	8001160 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011b4:	2200      	movs	r2, #0
 80011b6:	9203      	str	r2, [sp, #12]
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	6959      	ldr	r1, [r3, #20]
 80011bc:	9103      	str	r1, [sp, #12]
 80011be:	6999      	ldr	r1, [r3, #24]
 80011c0:	9103      	str	r1, [sp, #12]
 80011c2:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80011ca:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011cc:	9700      	str	r7, [sp, #0]
 80011ce:	4633      	mov	r3, r6
 80011d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7ff fe9d 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 80011da:	b920      	cbnz	r0, 80011e6 <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80011dc:	6822      	ldr	r2, [r4, #0]
 80011de:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	e7b4      	b.n	8001150 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011ee:	d002      	beq.n	80011f6 <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 80011f6:	2003      	movs	r0, #3
 80011f8:	e7b2      	b.n	8001160 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e7b0      	b.n	8001160 <I2C_MasterRequestRead+0x78>
 80011fe:	bf00      	nop
 8001200:	00010002 	.word	0x00010002
 8001204:	00010008 	.word	0x00010008

08001208 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001208:	b570      	push	{r4, r5, r6, lr}
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001218:	d11c      	bne.n	8001254 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800121a:	4620      	mov	r0, r4
 800121c:	f7ff fe61 	bl	8000ee2 <I2C_IsAcknowledgeFailed>
 8001220:	b9d0      	cbnz	r0, 8001258 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001222:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001226:	d0f3      	beq.n	8001210 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001228:	f7ff fae0 	bl	80007ec <HAL_GetTick>
 800122c:	1b80      	subs	r0, r0, r6
 800122e:	42a8      	cmp	r0, r5
 8001230:	d801      	bhi.n	8001236 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001232:	2d00      	cmp	r5, #0
 8001234:	d1ec      	bne.n	8001210 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001236:	2300      	movs	r3, #0
 8001238:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800123a:	2220      	movs	r2, #32
 800123c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001240:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001244:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001246:	f042 0220 	orr.w	r2, r2, #32
 800124a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800124c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	e000      	b.n	8001256 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001254:	2000      	movs	r0, #0
}
 8001256:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
 800125a:	e7fc      	b.n	8001256 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800125c <I2C_RequestMemoryWrite>:
{
 800125c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001260:	b085      	sub	sp, #20
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	4691      	mov	r9, r2
 8001268:	461f      	mov	r7, r3
 800126a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800126e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001278:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800127a:	9600      	str	r6, [sp, #0]
 800127c:	4643      	mov	r3, r8
 800127e:	2200      	movs	r2, #0
 8001280:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001284:	f7ff fe46 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 8001288:	b960      	cbnz	r0, 80012a4 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001290:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001292:	4633      	mov	r3, r6
 8001294:	4642      	mov	r2, r8
 8001296:	4926      	ldr	r1, [pc, #152]	; (8001330 <I2C_RequestMemoryWrite+0xd4>)
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff fe75 	bl	8000f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800129e:	b168      	cbz	r0, 80012bc <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
 80012a2:	e008      	b.n	80012b6 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012ac:	d002      	beq.n	80012b4 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
}
 80012b6:	b005      	add	sp, #20
 80012b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012bc:	2300      	movs	r3, #0
 80012be:	9303      	str	r3, [sp, #12]
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	9203      	str	r2, [sp, #12]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	9303      	str	r3, [sp, #12]
 80012ca:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012cc:	4632      	mov	r2, r6
 80012ce:	4641      	mov	r1, r8
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff ff99 	bl	8001208 <I2C_WaitOnTXEFlagUntilTimeout>
 80012d6:	b930      	cbnz	r0, 80012e6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012d8:	2f01      	cmp	r7, #1
 80012da:	d10f      	bne.n	80012fc <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	fa5f f689 	uxtb.w	r6, r9
 80012e2:	611e      	str	r6, [r3, #16]
 80012e4:	e7e7      	b.n	80012b6 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d001      	beq.n	80012f0 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e7e2      	b.n	80012b6 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	6813      	ldr	r3, [r2, #0]
 80012f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e7f7      	b.n	80012ec <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001302:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001304:	4632      	mov	r2, r6
 8001306:	4641      	mov	r1, r8
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff ff7d 	bl	8001208 <I2C_WaitOnTXEFlagUntilTimeout>
 800130e:	b920      	cbnz	r0, 800131a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	fa5f f689 	uxtb.w	r6, r9
 8001316:	611e      	str	r6, [r3, #16]
 8001318:	e7cd      	b.n	80012b6 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800131a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131c:	2b04      	cmp	r3, #4
 800131e:	d001      	beq.n	8001324 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	e7c8      	b.n	80012b6 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001324:	6822      	ldr	r2, [r4, #0]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e7f7      	b.n	8001320 <I2C_RequestMemoryWrite+0xc4>
 8001330:	00010002 	.word	0x00010002

08001334 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
 800133a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	f013 0f04 	tst.w	r3, #4
 8001344:	d11c      	bne.n	8001380 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fdcb 	bl	8000ee2 <I2C_IsAcknowledgeFailed>
 800134c:	b9d0      	cbnz	r0, 8001384 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800134e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001352:	d0f3      	beq.n	800133c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001354:	f7ff fa4a 	bl	80007ec <HAL_GetTick>
 8001358:	1b80      	subs	r0, r0, r6
 800135a:	42a8      	cmp	r0, r5
 800135c:	d801      	bhi.n	8001362 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800135e:	2d00      	cmp	r5, #0
 8001360:	d1ec      	bne.n	800133c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001366:	2220      	movs	r2, #32
 8001368:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800136c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001370:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001378:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
 800137e:	e000      	b.n	8001382 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001380:	2000      	movs	r0, #0
}
 8001382:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001384:	2001      	movs	r0, #1
 8001386:	e7fc      	b.n	8001382 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001388 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	4605      	mov	r5, r0
 800138c:	460c      	mov	r4, r1
 800138e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	6959      	ldr	r1, [r3, #20]
 8001394:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001398:	d129      	bne.n	80013ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800139a:	6959      	ldr	r1, [r3, #20]
 800139c:	f011 0f10 	tst.w	r1, #16
 80013a0:	d115      	bne.n	80013ce <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a2:	f7ff fa23 	bl	80007ec <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	42a0      	cmp	r0, r4
 80013aa:	d801      	bhi.n	80013b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80013ac:	2c00      	cmp	r4, #0
 80013ae:	d1ef      	bne.n	8001390 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013b4:	2220      	movs	r2, #32
 80013b6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ba:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013be:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013c0:	f042 0220 	orr.w	r2, r2, #32
 80013c4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013c6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1
}
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ce:	f06f 0210 	mvn.w	r2, #16
 80013d2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013d8:	2220      	movs	r2, #32
 80013da:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013de:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80013e2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013e4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80013ea:	2001      	movs	r0, #1
 80013ec:	e7ee      	b.n	80013cc <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7ec      	b.n	80013cc <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

080013f4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80013f4:	2800      	cmp	r0, #0
 80013f6:	f000 80cc 	beq.w	8001592 <HAL_I2C_Init+0x19e>
{
 80013fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001402:	2b00      	cmp	r3, #0
 8001404:	d077      	beq.n	80014f6 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001406:	2324      	movs	r3, #36	; 0x24
 8001408:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800140c:	6822      	ldr	r2, [r4, #0]
 800140e:	6813      	ldr	r3, [r2, #0]
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	6813      	ldr	r3, [r2, #0]
 800141a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	6813      	ldr	r3, [r2, #0]
 8001424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001428:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800142a:	f000 fedf 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800142e:	6862      	ldr	r2, [r4, #4]
 8001430:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_I2C_Init+0x1a8>)
 8001432:	429a      	cmp	r2, r3
 8001434:	d864      	bhi.n	8001500 <HAL_I2C_Init+0x10c>
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <HAL_I2C_Init+0x1ac>)
 8001438:	4298      	cmp	r0, r3
 800143a:	bf8c      	ite	hi
 800143c:	2300      	movhi	r3, #0
 800143e:	2301      	movls	r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 80a8 	bne.w	8001596 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001446:	4d57      	ldr	r5, [pc, #348]	; (80015a4 <HAL_I2C_Init+0x1b0>)
 8001448:	fba5 3500 	umull	r3, r5, r5, r0
 800144c:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144e:	6826      	ldr	r6, [r4, #0]
 8001450:	6871      	ldr	r1, [r6, #4]
 8001452:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001456:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 800145a:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145c:	6821      	ldr	r1, [r4, #0]
 800145e:	6a0b      	ldr	r3, [r1, #32]
 8001460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001464:	6865      	ldr	r5, [r4, #4]
 8001466:	4a4d      	ldr	r2, [pc, #308]	; (800159c <HAL_I2C_Init+0x1a8>)
 8001468:	4295      	cmp	r5, r2
 800146a:	d84f      	bhi.n	800150c <HAL_I2C_Init+0x118>
 800146c:	1c7a      	adds	r2, r7, #1
 800146e:	4313      	orrs	r3, r2
 8001470:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001472:	6825      	ldr	r5, [r4, #0]
 8001474:	69e9      	ldr	r1, [r5, #28]
 8001476:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800147a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800147e:	6863      	ldr	r3, [r4, #4]
 8001480:	4a46      	ldr	r2, [pc, #280]	; (800159c <HAL_I2C_Init+0x1a8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d84c      	bhi.n	8001520 <HAL_I2C_Init+0x12c>
 8001486:	3801      	subs	r0, #1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fbb0 f0f3 	udiv	r0, r0, r3
 800148e:	3001      	adds	r0, #1
 8001490:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001494:	4218      	tst	r0, r3
 8001496:	d078      	beq.n	800158a <HAL_I2C_Init+0x196>
 8001498:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800149c:	430b      	orrs	r3, r1
 800149e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a0:	6821      	ldr	r1, [r4, #0]
 80014a2:	680b      	ldr	r3, [r1, #0]
 80014a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80014a8:	69e2      	ldr	r2, [r4, #28]
 80014aa:	6a20      	ldr	r0, [r4, #32]
 80014ac:	4302      	orrs	r2, r0
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014b2:	6821      	ldr	r1, [r4, #0]
 80014b4:	688b      	ldr	r3, [r1, #8]
 80014b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014be:	6922      	ldr	r2, [r4, #16]
 80014c0:	68e0      	ldr	r0, [r4, #12]
 80014c2:	4302      	orrs	r2, r0
 80014c4:	4313      	orrs	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014c8:	6821      	ldr	r1, [r4, #0]
 80014ca:	68cb      	ldr	r3, [r1, #12]
 80014cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014d0:	6962      	ldr	r2, [r4, #20]
 80014d2:	69a0      	ldr	r0, [r4, #24]
 80014d4:	4302      	orrs	r2, r0
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	6813      	ldr	r3, [r2, #0]
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	2000      	movs	r0, #0
 80014e6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	2320      	movs	r3, #32
 80014ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80014f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80014fa:	f001 fa07 	bl	800290c <HAL_I2C_MspInit>
 80014fe:	e782      	b.n	8001406 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_I2C_Init+0x1b4>)
 8001502:	4298      	cmp	r0, r3
 8001504:	bf8c      	ite	hi
 8001506:	2300      	movhi	r3, #0
 8001508:	2301      	movls	r3, #1
 800150a:	e799      	b.n	8001440 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001510:	fb02 f207 	mul.w	r2, r2, r7
 8001514:	4d25      	ldr	r5, [pc, #148]	; (80015ac <HAL_I2C_Init+0x1b8>)
 8001516:	fba5 5202 	umull	r5, r2, r5, r2
 800151a:	0992      	lsrs	r2, r2, #6
 800151c:	3201      	adds	r2, #1
 800151e:	e7a6      	b.n	800146e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001520:	68a2      	ldr	r2, [r4, #8]
 8001522:	b9ba      	cbnz	r2, 8001554 <HAL_I2C_Init+0x160>
 8001524:	1e46      	subs	r6, r0, #1
 8001526:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800152a:	fbb6 f6f7 	udiv	r6, r6, r7
 800152e:	3601      	adds	r6, #1
 8001530:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001534:	fab6 f686 	clz	r6, r6
 8001538:	0976      	lsrs	r6, r6, #5
 800153a:	bb46      	cbnz	r6, 800158e <HAL_I2C_Init+0x19a>
 800153c:	b9c2      	cbnz	r2, 8001570 <HAL_I2C_Init+0x17c>
 800153e:	1e42      	subs	r2, r0, #1
 8001540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001544:	fbb2 f2f3 	udiv	r2, r2, r3
 8001548:	3201      	adds	r2, #1
 800154a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800154e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001552:	e7a3      	b.n	800149c <HAL_I2C_Init+0xa8>
 8001554:	1e46      	subs	r6, r0, #1
 8001556:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800155a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800155e:	fbb6 f6f7 	udiv	r6, r6, r7
 8001562:	3601      	adds	r6, #1
 8001564:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001568:	fab6 f686 	clz	r6, r6
 800156c:	0976      	lsrs	r6, r6, #5
 800156e:	e7e4      	b.n	800153a <HAL_I2C_Init+0x146>
 8001570:	1e42      	subs	r2, r0, #1
 8001572:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800157a:	fbb2 f2f3 	udiv	r2, r2, r3
 800157e:	3201      	adds	r2, #1
 8001580:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001584:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001588:	e788      	b.n	800149c <HAL_I2C_Init+0xa8>
 800158a:	2304      	movs	r3, #4
 800158c:	e786      	b.n	800149c <HAL_I2C_Init+0xa8>
 800158e:	2301      	movs	r3, #1
 8001590:	e784      	b.n	800149c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
}
 8001594:	4770      	bx	lr
    return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
 8001598:	e7ac      	b.n	80014f4 <HAL_I2C_Init+0x100>
 800159a:	bf00      	nop
 800159c:	000186a0 	.word	0x000186a0
 80015a0:	001e847f 	.word	0x001e847f
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	003d08ff 	.word	0x003d08ff
 80015ac:	10624dd3 	.word	0x10624dd3

080015b0 <HAL_I2C_Master_Transmit>:
{
 80015b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015b4:	b085      	sub	sp, #20
 80015b6:	4604      	mov	r4, r0
 80015b8:	460f      	mov	r7, r1
 80015ba:	4691      	mov	r9, r2
 80015bc:	4698      	mov	r8, r3
 80015be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff f914 	bl	80007ec <HAL_GetTick>
 80015c4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80015ca:	b2c0      	uxtb	r0, r0
 80015cc:	2820      	cmp	r0, #32
 80015ce:	d004      	beq.n	80015da <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80015d0:	2702      	movs	r7, #2
}
 80015d2:	4638      	mov	r0, r7
 80015d4:	b005      	add	sp, #20
 80015d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015da:	9500      	str	r5, [sp, #0]
 80015dc:	2319      	movs	r3, #25
 80015de:	2201      	movs	r2, #1
 80015e0:	494f      	ldr	r1, [pc, #316]	; (8001720 <HAL_I2C_Master_Transmit+0x170>)
 80015e2:	4620      	mov	r0, r4
 80015e4:	f7ff fc96 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	f040 8092 	bne.w	8001712 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80015ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	f000 808f 	beq.w	8001716 <HAL_I2C_Master_Transmit+0x166>
 80015f8:	2301      	movs	r3, #1
 80015fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f012 0f01 	tst.w	r2, #1
 8001606:	d103      	bne.n	8001610 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001618:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800161a:	2321      	movs	r3, #33	; 0x21
 800161c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001620:	2310      	movs	r3, #16
 8001622:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800162a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800162e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001632:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001634:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001636:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <HAL_I2C_Master_Transmit+0x174>)
 8001638:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800163a:	462b      	mov	r3, r5
 800163c:	4632      	mov	r2, r6
 800163e:	4639      	mov	r1, r7
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff fcf7 	bl	8001034 <I2C_MasterRequestWrite>
 8001646:	4607      	mov	r7, r0
 8001648:	2800      	cmp	r0, #0
 800164a:	d166      	bne.n	800171a <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164c:	2300      	movs	r3, #0
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	9203      	str	r2, [sp, #12]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800165c:	e011      	b.n	8001682 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001660:	2b04      	cmp	r3, #4
 8001662:	d001      	beq.n	8001668 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001664:	2701      	movs	r7, #1
 8001666:	e7b4      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001668:	6822      	ldr	r2, [r4, #0]
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e7f7      	b.n	8001664 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001674:	462a      	mov	r2, r5
 8001676:	4631      	mov	r1, r6
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fe5b 	bl	8001334 <I2C_WaitOnBTFFlagUntilTimeout>
 800167e:	2800      	cmp	r0, #0
 8001680:	d12e      	bne.n	80016e0 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001682:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001684:	2b00      	cmp	r3, #0
 8001686:	d036      	beq.n	80016f6 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001688:	462a      	mov	r2, r5
 800168a:	4631      	mov	r1, r6
 800168c:	4620      	mov	r0, r4
 800168e:	f7ff fdbb 	bl	8001208 <I2C_WaitOnTXEFlagUntilTimeout>
 8001692:	2800      	cmp	r0, #0
 8001694:	d1e3      	bne.n	800165e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001696:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800169e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016a0:	1c4b      	adds	r3, r1, #1
 80016a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80016a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80016ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	6950      	ldr	r0, [r2, #20]
 80016ba:	f010 0f04 	tst.w	r0, #4
 80016be:	d0d9      	beq.n	8001674 <HAL_I2C_Master_Transmit+0xc4>
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0d7      	beq.n	8001674 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c4:	784b      	ldrb	r3, [r1, #1]
 80016c6:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80016c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ca:	3301      	adds	r3, #1
 80016cc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80016ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	8523      	strh	r3, [r4, #40]	; 0x28
 80016de:	e7c9      	b.n	8001674 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 80016e6:	2701      	movs	r7, #1
 80016e8:	e773      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	6813      	ldr	r3, [r2, #0]
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	e7f7      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	6813      	ldr	r3, [r2, #0]
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001700:	2320      	movs	r3, #32
 8001702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	2300      	movs	r3, #0
 8001708:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800170c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001710:	e75f      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001712:	2702      	movs	r7, #2
 8001714:	e75d      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001716:	2702      	movs	r7, #2
 8001718:	e75b      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800171a:	2701      	movs	r7, #1
 800171c:	e759      	b.n	80015d2 <HAL_I2C_Master_Transmit+0x22>
 800171e:	bf00      	nop
 8001720:	00100002 	.word	0x00100002
 8001724:	ffff0000 	.word	0xffff0000

08001728 <HAL_I2C_Master_Receive>:
{
 8001728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800172c:	b089      	sub	sp, #36	; 0x24
 800172e:	4604      	mov	r4, r0
 8001730:	460f      	mov	r7, r1
 8001732:	4691      	mov	r9, r2
 8001734:	4698      	mov	r8, r3
 8001736:	9e10      	ldr	r6, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff f856 	bl	80007ec <HAL_GetTick>
 8001740:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001742:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001746:	b2c0      	uxtb	r0, r0
 8001748:	2820      	cmp	r0, #32
 800174a:	d004      	beq.n	8001756 <HAL_I2C_Master_Receive+0x2e>
    return HAL_BUSY;
 800174c:	2702      	movs	r7, #2
}
 800174e:	4638      	mov	r0, r7
 8001750:	b009      	add	sp, #36	; 0x24
 8001752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001756:	9500      	str	r5, [sp, #0]
 8001758:	2319      	movs	r3, #25
 800175a:	2201      	movs	r2, #1
 800175c:	499d      	ldr	r1, [pc, #628]	; (80019d4 <HAL_I2C_Master_Receive+0x2ac>)
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fbd8 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 8001764:	2800      	cmp	r0, #0
 8001766:	f040 8172 	bne.w	8001a4e <HAL_I2C_Master_Receive+0x326>
    __HAL_LOCK(hi2c);
 800176a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800176e:	2b01      	cmp	r3, #1
 8001770:	f000 816f 	beq.w	8001a52 <HAL_I2C_Master_Receive+0x32a>
 8001774:	2301      	movs	r3, #1
 8001776:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f012 0f01 	tst.w	r2, #1
 8001782:	d103      	bne.n	800178c <HAL_I2C_Master_Receive+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800178c:	6822      	ldr	r2, [r4, #0]
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001794:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001796:	2322      	movs	r3, #34	; 0x22
 8001798:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179c:	2310      	movs	r3, #16
 800179e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80017a6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017aa:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017b0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b2:	4b89      	ldr	r3, [pc, #548]	; (80019d8 <HAL_I2C_Master_Receive+0x2b0>)
 80017b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017b6:	462b      	mov	r3, r5
 80017b8:	4632      	mov	r2, r6
 80017ba:	4639      	mov	r1, r7
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fc93 	bl	80010e8 <I2C_MasterRequestRead>
 80017c2:	4607      	mov	r7, r0
 80017c4:	2800      	cmp	r0, #0
 80017c6:	f040 8146 	bne.w	8001a56 <HAL_I2C_Master_Receive+0x32e>
    if (hi2c->XferSize == 0U)
 80017ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017cc:	b95b      	cbnz	r3, 80017e6 <HAL_I2C_Master_Receive+0xbe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ce:	9303      	str	r3, [sp, #12]
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	9203      	str	r2, [sp, #12]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	9203      	str	r2, [sp, #12]
 80017da:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e076      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
    else if (hi2c->XferSize == 1U)
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d00f      	beq.n	800180a <HAL_I2C_Master_Receive+0xe2>
    else if (hi2c->XferSize == 2U)
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d021      	beq.n	8001832 <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f8:	2300      	movs	r3, #0
 80017fa:	9306      	str	r3, [sp, #24]
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	9206      	str	r2, [sp, #24]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	9306      	str	r3, [sp, #24]
 8001806:	9b06      	ldr	r3, [sp, #24]
 8001808:	e064      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001816:	2300      	movs	r3, #0
 8001818:	9304      	str	r3, [sp, #16]
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	9204      	str	r2, [sp, #16]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	9204      	str	r2, [sp, #16]
 8001824:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800182e:	b662      	cpsie	i
}
 8001830:	e050      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001832:	6822      	ldr	r2, [r4, #0]
 8001834:	6813      	ldr	r3, [r2, #0]
 8001836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800183a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183e:	2300      	movs	r3, #0
 8001840:	9305      	str	r3, [sp, #20]
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	9205      	str	r2, [sp, #20]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	9205      	str	r2, [sp, #20]
 800184c:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001854:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001856:	b662      	cpsie	i
}
 8001858:	e03c      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185a:	462a      	mov	r2, r5
 800185c:	4631      	mov	r1, r6
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fd92 	bl	8001388 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001864:	2800      	cmp	r0, #0
 8001866:	f040 80f8 	bne.w	8001a5a <HAL_I2C_Master_Receive+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001870:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001878:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800187a:	3b01      	subs	r3, #1
 800187c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800187e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001880:	b29b      	uxth	r3, r3
 8001882:	3b01      	subs	r3, #1
 8001884:	b29b      	uxth	r3, r3
 8001886:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001888:	e024      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	6813      	ldr	r3, [r2, #0]
 8001890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001894:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800189c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800189e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80018a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018a6:	3b01      	subs	r3, #1
 80018a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018b4:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018bc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80018be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80018c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018c6:	3b01      	subs	r3, #1
 80018c8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80b0 	beq.w	8001a3c <HAL_I2C_Master_Receive+0x314>
      if (hi2c->XferSize <= 3U)
 80018dc:	2b03      	cmp	r3, #3
 80018de:	f200 8083 	bhi.w	80019e8 <HAL_I2C_Master_Receive+0x2c0>
        if (hi2c->XferSize == 1U)
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d0b9      	beq.n	800185a <HAL_I2C_Master_Receive+0x132>
        else if (hi2c->XferSize == 2U)
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d10a      	bne.n	8001900 <HAL_I2C_Master_Receive+0x1d8>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018ea:	9500      	str	r5, [sp, #0]
 80018ec:	4633      	mov	r3, r6
 80018ee:	2200      	movs	r2, #0
 80018f0:	493a      	ldr	r1, [pc, #232]	; (80019dc <HAL_I2C_Master_Receive+0x2b4>)
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff fb0e 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d0c6      	beq.n	800188a <HAL_I2C_Master_Receive+0x162>
            return HAL_ERROR;
 80018fc:	2701      	movs	r7, #1
 80018fe:	e726      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001900:	9500      	str	r5, [sp, #0]
 8001902:	4633      	mov	r3, r6
 8001904:	2200      	movs	r2, #0
 8001906:	4935      	ldr	r1, [pc, #212]	; (80019dc <HAL_I2C_Master_Receive+0x2b4>)
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff fb03 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 800190e:	2800      	cmp	r0, #0
 8001910:	f040 80a5 	bne.w	8001a5e <HAL_I2C_Master_Receive+0x336>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	6813      	ldr	r3, [r2, #0]
 8001918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800191c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800191e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001926:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192a:	3301      	adds	r3, #1
 800192c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800192e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001930:	3b01      	subs	r3, #1
 8001932:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001934:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_I2C_Master_Receive+0x2b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	08db      	lsrs	r3, r3, #3
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_I2C_Master_Receive+0x2bc>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001950:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001954:	9307      	str	r3, [sp, #28]
            count--;
 8001956:	9b07      	ldr	r3, [sp, #28]
 8001958:	3b01      	subs	r3, #1
 800195a:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 800195c:	9b07      	ldr	r3, [sp, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d028      	beq.n	80019b4 <HAL_I2C_Master_Receive+0x28c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	f012 0f04 	tst.w	r2, #4
 800196a:	d0f4      	beq.n	8001956 <HAL_I2C_Master_Receive+0x22e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001972:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800197a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800197c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800197e:	3301      	adds	r3, #1
 8001980:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001982:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001992:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800199a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800199c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800199e:	3301      	adds	r3, #1
 80019a0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80019a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80019b2:	e78f      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80019b4:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80019b6:	2220      	movs	r2, #32
 80019b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	6422      	str	r2, [r4, #64]	; 0x40
 80019c8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80019ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 80019ce:	2701      	movs	r7, #1
 80019d0:	e6bd      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
 80019d2:	bf00      	nop
 80019d4:	00100002 	.word	0x00100002
 80019d8:	ffff0000 	.word	0xffff0000
 80019dc:	00010004 	.word	0x00010004
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e8:	462a      	mov	r2, r5
 80019ea:	4631      	mov	r1, r6
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff fccb 	bl	8001388 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d135      	bne.n	8001a62 <HAL_I2C_Master_Receive+0x33a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80019fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a00:	1c53      	adds	r3, r2, #1
 8001a02:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001a04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001a0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	6959      	ldr	r1, [r3, #20]
 8001a18:	f011 0f04 	tst.w	r1, #4
 8001a1c:	f43f af5a 	beq.w	80018d4 <HAL_I2C_Master_Receive+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a26:	3301      	adds	r3, #1
 8001a28:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001a3a:	e74b      	b.n	80018d4 <HAL_I2C_Master_Receive+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001a48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001a4c:	e67f      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 8001a4e:	2702      	movs	r7, #2
 8001a50:	e67d      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
    __HAL_LOCK(hi2c);
 8001a52:	2702      	movs	r7, #2
 8001a54:	e67b      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
      return HAL_ERROR;
 8001a56:	2701      	movs	r7, #1
 8001a58:	e679      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8001a5a:	2701      	movs	r7, #1
 8001a5c:	e677      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
            return HAL_ERROR;
 8001a5e:	2701      	movs	r7, #1
 8001a60:	e675      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
          return HAL_ERROR;
 8001a62:	2701      	movs	r7, #1
 8001a64:	e673      	b.n	800174e <HAL_I2C_Master_Receive+0x26>
 8001a66:	bf00      	nop

08001a68 <HAL_I2C_Mem_Write>:
{
 8001a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	4604      	mov	r4, r0
 8001a70:	460f      	mov	r7, r1
 8001a72:	4690      	mov	r8, r2
 8001a74:	4699      	mov	r9, r3
 8001a76:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7fe feb8 	bl	80007ec <HAL_GetTick>
 8001a7c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001a82:	b2c0      	uxtb	r0, r0
 8001a84:	2820      	cmp	r0, #32
 8001a86:	d003      	beq.n	8001a90 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001a88:	2002      	movs	r0, #2
}
 8001a8a:	b003      	add	sp, #12
 8001a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a90:	9500      	str	r5, [sp, #0]
 8001a92:	2319      	movs	r3, #25
 8001a94:	2201      	movs	r2, #1
 8001a96:	494b      	ldr	r1, [pc, #300]	; (8001bc4 <HAL_I2C_Mem_Write+0x15c>)
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fa3b 	bl	8000f14 <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	f040 8089 	bne.w	8001bb6 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001aa4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f000 8086 	beq.w	8001bba <HAL_I2C_Mem_Write+0x152>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	f012 0f01 	tst.w	r2, #1
 8001abc:	d103      	bne.n	8001ac6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	6813      	ldr	r3, [r2, #0]
 8001aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ace:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ad0:	2321      	movs	r3, #33	; 0x21
 8001ad2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ae2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001ae8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_I2C_Mem_Write+0x160>)
 8001af0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af2:	9501      	str	r5, [sp, #4]
 8001af4:	9600      	str	r6, [sp, #0]
 8001af6:	464b      	mov	r3, r9
 8001af8:	4642      	mov	r2, r8
 8001afa:	4639      	mov	r1, r7
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff fbad 	bl	800125c <I2C_RequestMemoryWrite>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d15b      	bne.n	8001bbe <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8001b06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d035      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0c:	462a      	mov	r2, r5
 8001b0e:	4631      	mov	r1, r6
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff fb79 	bl	8001208 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b16:	bb20      	cbnz	r0, 8001b62 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b22:	1c4b      	adds	r3, r1, #1
 8001b24:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001b26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	6958      	ldr	r0, [r3, #20]
 8001b3c:	f010 0f04 	tst.w	r0, #4
 8001b40:	d0e1      	beq.n	8001b06 <HAL_I2C_Mem_Write+0x9e>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d0df      	beq.n	8001b06 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b46:	784a      	ldrb	r2, [r1, #1]
 8001b48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001b50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b52:	3b01      	subs	r3, #1
 8001b54:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001b60:	e7d1      	b.n	8001b06 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	e78e      	b.n	8001a8a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	6813      	ldr	r3, [r2, #0]
 8001b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e7f7      	b.n	8001b68 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b78:	462a      	mov	r2, r5
 8001b7a:	4631      	mov	r1, r6
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff fbd9 	bl	8001334 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b82:	b150      	cbz	r0, 8001b9a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e77d      	b.n	8001a8a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8e:	6822      	ldr	r2, [r4, #0]
 8001b90:	6813      	ldr	r3, [r2, #0]
 8001b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e7f7      	b.n	8001b8a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001bb0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001bb4:	e769      	b.n	8001a8a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	e767      	b.n	8001a8a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001bba:	2002      	movs	r0, #2
 8001bbc:	e765      	b.n	8001a8a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e763      	b.n	8001a8a <HAL_I2C_Mem_Write+0x22>
 8001bc2:	bf00      	nop
 8001bc4:	00100002 	.word	0x00100002
 8001bc8:	ffff0000 	.word	0xffff0000

08001bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bcc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <RCC_Delay+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <RCC_Delay+0x28>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	0a5b      	lsrs	r3, r3, #9
 8001bda:	fb00 f303 	mul.w	r3, r0, r3
 8001bde:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001be0:	bf00      	nop
  }
  while (Delay --);
 8001be2:	9b01      	ldr	r3, [sp, #4]
 8001be4:	1e5a      	subs	r2, r3, #1
 8001be6:	9201      	str	r2, [sp, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f9      	bne.n	8001be0 <RCC_Delay+0x14>
}
 8001bec:	b002      	add	sp, #8
 8001bee:	4770      	bx	lr
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	10624dd3 	.word	0x10624dd3

08001bf8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	f000 81f1 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x3e8>
{
 8001bfe:	b570      	push	{r4, r5, r6, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	f013 0f01 	tst.w	r3, #1
 8001c0a:	d02c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0c:	4baa      	ldr	r3, [pc, #680]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d01d      	beq.n	8001c54 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c18:	4ba7      	ldr	r3, [pc, #668]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d012      	beq.n	8001c4a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c24:	6863      	ldr	r3, [r4, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2a:	d041      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xb8>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d155      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe4>
 8001c30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c34:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e037      	b.n	8001cba <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4a:	4b9b      	ldr	r3, [pc, #620]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c52:	d0e7      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	4b98      	ldr	r3, [pc, #608]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_OscConfig+0x6e>
 8001c5e:	6863      	ldr	r3, [r4, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 81bf 	beq.w	8001fe4 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	f013 0f02 	tst.w	r3, #2
 8001c6c:	d075      	beq.n	8001d5a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6e:	4b92      	ldr	r3, [pc, #584]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f013 0f0c 	tst.w	r3, #12
 8001c76:	d05f      	beq.n	8001d38 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c78:	4b8f      	ldr	r3, [pc, #572]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d054      	beq.n	8001d2e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c84:	6923      	ldr	r3, [r4, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8089 	beq.w	8001d9e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b8b      	ldr	r3, [pc, #556]	; (8001ebc <HAL_RCC_OscConfig+0x2c4>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c92:	f7fe fdab 	bl	80007ec <HAL_GetTick>
 8001c96:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f013 0f02 	tst.w	r3, #2
 8001ca0:	d174      	bne.n	8001d8c <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7fe fda3 	bl	80007ec <HAL_GetTick>
 8001ca6:	1b40      	subs	r0, r0, r5
 8001ca8:	2802      	cmp	r0, #2
 8001caa:	d9f5      	bls.n	8001c98 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001cac:	2003      	movs	r0, #3
 8001cae:	e19e      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	4a81      	ldr	r2, [pc, #516]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	b343      	cbz	r3, 8001d10 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fd95 	bl	80007ec <HAL_GetTick>
 8001cc2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc4:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ccc:	d1cb      	bne.n	8001c66 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cce:	f7fe fd8d 	bl	80007ec <HAL_GetTick>
 8001cd2:	1b40      	subs	r0, r0, r5
 8001cd4:	2864      	cmp	r0, #100	; 0x64
 8001cd6:	d9f5      	bls.n	8001cc4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001cd8:	2003      	movs	r0, #3
 8001cda:	e188      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_OscConfig+0xfe>
 8001ce2:	4b75      	ldr	r3, [pc, #468]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e7e1      	b.n	8001cba <HAL_RCC_OscConfig+0xc2>
 8001cf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cfa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e7d4      	b.n	8001cba <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001d10:	f7fe fd6c 	bl	80007ec <HAL_GetTick>
 8001d14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d1e:	d0a2      	beq.n	8001c66 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7fe fd64 	bl	80007ec <HAL_GetTick>
 8001d24:	1b40      	subs	r0, r0, r5
 8001d26:	2864      	cmp	r0, #100	; 0x64
 8001d28:	d9f5      	bls.n	8001d16 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e15f      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d36:	d1a5      	bne.n	8001c84 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f013 0f02 	tst.w	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_OscConfig+0x152>
 8001d42:	6923      	ldr	r3, [r4, #16]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	f040 814f 	bne.w	8001fe8 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4a5b      	ldr	r2, [pc, #364]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d52:	6961      	ldr	r1, [r4, #20]
 8001d54:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d58:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	f013 0f08 	tst.w	r3, #8
 8001d60:	d032      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d62:	69a3      	ldr	r3, [r4, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d045      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001d68:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <HAL_RCC_OscConfig+0x2c8>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d6e:	f7fe fd3d 	bl	80007ec <HAL_GetTick>
 8001d72:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f013 0f02 	tst.w	r3, #2
 8001d7c:	d121      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fd35 	bl	80007ec <HAL_GetTick>
 8001d82:	1b40      	subs	r0, r0, r5
 8001d84:	2802      	cmp	r0, #2
 8001d86:	d9f5      	bls.n	8001d74 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8001d88:	2003      	movs	r0, #3
 8001d8a:	e130      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d94:	6961      	ldr	r1, [r4, #20]
 8001d96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e7dd      	b.n	8001d5a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_OscConfig+0x2c4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001da4:	f7fe fd22 	bl	80007ec <HAL_GetTick>
 8001da8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f013 0f02 	tst.w	r3, #2
 8001db2:	d0d2      	beq.n	8001d5a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7fe fd1a 	bl	80007ec <HAL_GetTick>
 8001db8:	1b40      	subs	r0, r0, r5
 8001dba:	2802      	cmp	r0, #2
 8001dbc:	d9f5      	bls.n	8001daa <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	e115      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff ff02 	bl	8001bcc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	f013 0f04 	tst.w	r3, #4
 8001dce:	f000 8097 	beq.w	8001f00 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001dda:	d11d      	bne.n	8001e18 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001de4:	61da      	str	r2, [r3, #28]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001df0:	2501      	movs	r5, #1
 8001df2:	e012      	b.n	8001e1a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <HAL_RCC_OscConfig+0x2c8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fcf7 	bl	80007ec <HAL_GetTick>
 8001dfe:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	f013 0f02 	tst.w	r3, #2
 8001e08:	d0de      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7fe fcef 	bl	80007ec <HAL_GetTick>
 8001e0e:	1b40      	subs	r0, r0, r5
 8001e10:	2802      	cmp	r0, #2
 8001e12:	d9f5      	bls.n	8001e00 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
 8001e16:	e0ea      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x2cc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e22:	d011      	beq.n	8001e48 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	68e3      	ldr	r3, [r4, #12]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d022      	beq.n	8001e70 <HAL_RCC_OscConfig+0x278>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d138      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2a8>
 8001e2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e32:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e36:	6a1a      	ldr	r2, [r3, #32]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	621a      	str	r2, [r3, #32]
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	f022 0204 	bic.w	r2, r2, #4
 8001e44:	621a      	str	r2, [r3, #32]
 8001e46:	e018      	b.n	8001e7a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x2cc>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001e52:	f7fe fccb 	bl	80007ec <HAL_GetTick>
 8001e56:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x2cc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e60:	d1e0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7fe fcc3 	bl	80007ec <HAL_GetTick>
 8001e66:	1b80      	subs	r0, r0, r6
 8001e68:	2864      	cmp	r0, #100	; 0x64
 8001e6a:	d9f5      	bls.n	8001e58 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	e0be      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001e72:	6a13      	ldr	r3, [r2, #32]
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7a:	68e3      	ldr	r3, [r4, #12]
 8001e7c:	b373      	cbz	r3, 8001edc <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001e7e:	f7fe fcb5 	bl	80007ec <HAL_GetTick>
 8001e82:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f013 0f02 	tst.w	r3, #2
 8001e8c:	d137      	bne.n	8001efe <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7fe fcad 	bl	80007ec <HAL_GetTick>
 8001e92:	1b80      	subs	r0, r0, r6
 8001e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e98:	4298      	cmp	r0, r3
 8001e9a:	d9f3      	bls.n	8001e84 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	e0a6      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d011      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2d0>
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCC_OscConfig+0x2c0>)
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	621a      	str	r2, [r3, #32]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	f022 0204 	bic.w	r2, r2, #4
 8001eb4:	621a      	str	r2, [r3, #32]
 8001eb6:	e7e0      	b.n	8001e7a <HAL_RCC_OscConfig+0x282>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	42420000 	.word	0x42420000
 8001ec0:	42420480 	.word	0x42420480
 8001ec4:	40007000 	.word	0x40007000
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001eca:	6a1a      	ldr	r2, [r3, #32]
 8001ecc:	f042 0204 	orr.w	r2, r2, #4
 8001ed0:	621a      	str	r2, [r3, #32]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	e7ce      	b.n	8001e7a <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8001edc:	f7fe fc86 	bl	80007ec <HAL_GetTick>
 8001ee0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f013 0f02 	tst.w	r3, #2
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7fe fc7e 	bl	80007ec <HAL_GetTick>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ef6:	4298      	cmp	r0, r3
 8001ef8:	d9f3      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8001efa:	2003      	movs	r0, #3
 8001efc:	e077      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001efe:	b9e5      	cbnz	r5, 8001f3a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	69e3      	ldr	r3, [r4, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d072      	beq.n	8001fec <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f06:	4a3e      	ldr	r2, [pc, #248]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001f08:	6852      	ldr	r2, [r2, #4]
 8001f0a:	f002 020c 	and.w	r2, r2, #12
 8001f0e:	2a08      	cmp	r2, #8
 8001f10:	d056      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d017      	beq.n	8001f46 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x40c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fc66 	bl	80007ec <HAL_GetTick>
 8001f20:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f2a:	d047      	beq.n	8001fbc <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fc5e 	bl	80007ec <HAL_GetTick>
 8001f30:	1b00      	subs	r0, r0, r4
 8001f32:	2802      	cmp	r0, #2
 8001f34:	d9f5      	bls.n	8001f22 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001f36:	2003      	movs	r0, #3
 8001f38:	e059      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001f3c:	69d3      	ldr	r3, [r2, #28]
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	61d3      	str	r3, [r2, #28]
 8001f44:	e7dc      	b.n	8001f00 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001f46:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCC_OscConfig+0x40c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fc4e 	bl	80007ec <HAL_GetTick>
 8001f50:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f5a:	d006      	beq.n	8001f6a <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7fe fc46 	bl	80007ec <HAL_GetTick>
 8001f60:	1b40      	subs	r0, r0, r5
 8001f62:	2802      	cmp	r0, #2
 8001f64:	d9f5      	bls.n	8001f52 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001f66:	2003      	movs	r0, #3
 8001f68:	e041      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f6a:	6a23      	ldr	r3, [r4, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d01a      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f72:	4923      	ldr	r1, [pc, #140]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001f74:	684b      	ldr	r3, [r1, #4]
 8001f76:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001f7a:	6a22      	ldr	r2, [r4, #32]
 8001f7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001f7e:	4302      	orrs	r2, r0
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_RCC_OscConfig+0x40c>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fc2f 	bl	80007ec <HAL_GetTick>
 8001f8e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f98:	d10e      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe fc27 	bl	80007ec <HAL_GetTick>
 8001f9e:	1b00      	subs	r0, r0, r4
 8001fa0:	2802      	cmp	r0, #2
 8001fa2:	d9f5      	bls.n	8001f90 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	e022      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001faa:	6853      	ldr	r3, [r2, #4]
 8001fac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fb0:	68a1      	ldr	r1, [r4, #8]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6053      	str	r3, [r2, #4]
 8001fb6:	e7dc      	b.n	8001f72 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e016      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d016      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_OscConfig+0x408>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001fcc:	6a22      	ldr	r2, [r4, #32]
 8001fce:	4291      	cmp	r1, r2
 8001fd0:	d111      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10e      	bne.n	8001ffa <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001fdc:	2000      	movs	r0, #0
 8001fde:	e006      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
}
 8001fe2:	4770      	bx	lr
        return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e002      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001fec:	2000      	movs	r0, #0
}
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	e7fb      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	e7f9      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	e7f7      	b.n	8001fee <HAL_RCC_OscConfig+0x3f6>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	42420060 	.word	0x42420060

08002008 <HAL_RCC_GetSysClockFreq>:
{
 8002008:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_RCC_GetSysClockFreq+0x5c>)
 800200c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800200e:	f10d 0c18 	add.w	ip, sp, #24
 8002012:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002016:	f240 2301 	movw	r3, #513	; 0x201
 800201a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_GetSysClockFreq+0x60>)
 8002020:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002022:	f003 020c 	and.w	r2, r3, #12
 8002026:	2a08      	cmp	r2, #8
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800202a:	4810      	ldr	r0, [pc, #64]	; (800206c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800202c:	b006      	add	sp, #24
 800202e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002030:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002034:	4462      	add	r2, ip
 8002036:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800203a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800203e:	d00c      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_GetSysClockFreq+0x60>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002048:	4463      	add	r3, ip
 800204a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <HAL_RCC_GetSysClockFreq+0x64>)
 8002050:	fb00 f002 	mul.w	r0, r0, r2
 8002054:	fbb0 f0f3 	udiv	r0, r0, r3
 8002058:	e7e8      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_RCC_GetSysClockFreq+0x68>)
 800205c:	fb00 f002 	mul.w	r0, r0, r2
 8002060:	e7e4      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x24>
 8002062:	bf00      	nop
 8002064:	08002bf8 	.word	0x08002bf8
 8002068:	40021000 	.word	0x40021000
 800206c:	007a1200 	.word	0x007a1200
 8002070:	003d0900 	.word	0x003d0900

08002074 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002074:	2800      	cmp	r0, #0
 8002076:	f000 80a0 	beq.w	80021ba <HAL_RCC_ClockConfig+0x146>
{
 800207a:	b570      	push	{r4, r5, r6, lr}
 800207c:	460d      	mov	r5, r1
 800207e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x158>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	428b      	cmp	r3, r1
 800208a:	d20b      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_RCC_ClockConfig+0x158>)
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f023 0307 	bic.w	r3, r3, #7
 8002094:	430b      	orrs	r3, r1
 8002096:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	6813      	ldr	r3, [r2, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	428b      	cmp	r3, r1
 80020a0:	f040 808d 	bne.w	80021be <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f013 0f02 	tst.w	r3, #2
 80020aa:	d017      	beq.n	80020dc <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	f013 0f04 	tst.w	r3, #4
 80020b0:	d004      	beq.n	80020bc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b2:	4a47      	ldr	r2, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 80020b4:	6853      	ldr	r3, [r2, #4]
 80020b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ba:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	f013 0f08 	tst.w	r3, #8
 80020c2:	d004      	beq.n	80020ce <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4a42      	ldr	r2, [pc, #264]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 80020c6:	6853      	ldr	r3, [r2, #4]
 80020c8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020cc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 80020d0:	6853      	ldr	r3, [r2, #4]
 80020d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d6:	68a1      	ldr	r1, [r4, #8]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f013 0f01 	tst.w	r3, #1
 80020e2:	d031      	beq.n	8002148 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e4:	6863      	ldr	r3, [r4, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d020      	beq.n	800212c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d025      	beq.n	800213a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	f012 0f02 	tst.w	r2, #2
 80020f6:	d064      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f8:	4935      	ldr	r1, [pc, #212]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 80020fa:	684a      	ldr	r2, [r1, #4]
 80020fc:	f022 0203 	bic.w	r2, r2, #3
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002104:	f7fe fb72 	bl	80007ec <HAL_GetTick>
 8002108:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	6862      	ldr	r2, [r4, #4]
 8002114:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002118:	d016      	beq.n	8002148 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211a:	f7fe fb67 	bl	80007ec <HAL_GetTick>
 800211e:	1b80      	subs	r0, r0, r6
 8002120:	f241 3388 	movw	r3, #5000	; 0x1388
 8002124:	4298      	cmp	r0, r3
 8002126:	d9f0      	bls.n	800210a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002128:	2003      	movs	r0, #3
 800212a:	e045      	b.n	80021b8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212c:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002134:	d1e0      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002136:	2001      	movs	r0, #1
 8002138:	e03e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002142:	d1d9      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
 8002146:	e037      	b.n	80021b8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x158>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	42ab      	cmp	r3, r5
 8002152:	d90a      	bls.n	800216a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_RCC_ClockConfig+0x158>)
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	f023 0307 	bic.w	r3, r3, #7
 800215c:	432b      	orrs	r3, r5
 800215e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002160:	6813      	ldr	r3, [r2, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	42ab      	cmp	r3, r5
 8002168:	d12d      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	f013 0f04 	tst.w	r3, #4
 8002170:	d006      	beq.n	8002180 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 8002174:	6853      	ldr	r3, [r2, #4]
 8002176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800217a:	68e1      	ldr	r1, [r4, #12]
 800217c:	430b      	orrs	r3, r1
 800217e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	f013 0f08 	tst.w	r3, #8
 8002186:	d007      	beq.n	8002198 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 800218a:	6853      	ldr	r3, [r2, #4]
 800218c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002190:	6921      	ldr	r1, [r4, #16]
 8002192:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002196:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002198:	f7ff ff36 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCC_ClockConfig+0x15c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_RCC_ClockConfig+0x160>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	40d8      	lsrs	r0, r3
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x164>)
 80021ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x168>)
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	f7fe fad9 	bl	8000768 <HAL_InitTick>
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
}
 80021b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80021ba:	2001      	movs	r0, #1
}
 80021bc:	4770      	bx	lr
    return HAL_ERROR;
 80021be:	2001      	movs	r0, #1
 80021c0:	e7fa      	b.n	80021b8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
 80021c4:	e7f8      	b.n	80021b8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
 80021c8:	e7f6      	b.n	80021b8 <HAL_RCC_ClockConfig+0x144>
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08002be0 	.word	0x08002be0
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_RCC_GetHCLKFreq>:
}
 80021e0:	4b01      	ldr	r3, [pc, #4]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x8>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2000000c 	.word	0x2000000c

080021ec <HAL_RCC_GetPCLK1Freq>:
{
 80021ec:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ee:	f7ff fff7 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80021fa:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
}
 80021fe:	40d8      	lsrs	r0, r3
 8002200:	bd08      	pop	{r3, pc}
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08002bf0 	.word	0x08002bf0

0800220c <HAL_RCC_GetPCLK2Freq>:
{
 800220c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800220e:	f7ff ffe7 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800221a:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
}
 800221e:	40d8      	lsrs	r0, r3
 8002220:	bd08      	pop	{r3, pc}
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	08002bf0 	.word	0x08002bf0

0800222c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800222c:	b510      	push	{r4, lr}
 800222e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002230:	6802      	ldr	r2, [r0, #0]
 8002232:	6913      	ldr	r3, [r2, #16]
 8002234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002238:	68c1      	ldr	r1, [r0, #12]
 800223a:	430b      	orrs	r3, r1
 800223c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800223e:	6883      	ldr	r3, [r0, #8]
 8002240:	6902      	ldr	r2, [r0, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	6942      	ldr	r2, [r0, #20]
 8002246:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002248:	6801      	ldr	r1, [r0, #0]
 800224a:	68cb      	ldr	r3, [r1, #12]
 800224c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002250:	f023 030c 	bic.w	r3, r3, #12
 8002254:	4313      	orrs	r3, r2
 8002256:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002258:	6802      	ldr	r2, [r0, #0]
 800225a:	6953      	ldr	r3, [r2, #20]
 800225c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002260:	6981      	ldr	r1, [r0, #24]
 8002262:	430b      	orrs	r3, r1
 8002264:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002266:	6802      	ldr	r2, [r0, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <UART_SetConfig+0x88>)
 800226a:	429a      	cmp	r2, r3
 800226c:	d01f      	beq.n	80022ae <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800226e:	f7ff ffbd 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002272:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800227a:	6862      	ldr	r2, [r4, #4]
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002282:	480d      	ldr	r0, [pc, #52]	; (80022b8 <UART_SetConfig+0x8c>)
 8002284:	fba0 3102 	umull	r3, r1, r0, r2
 8002288:	0949      	lsrs	r1, r1, #5
 800228a:	2364      	movs	r3, #100	; 0x64
 800228c:	fb03 2311 	mls	r3, r3, r1, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	3332      	adds	r3, #50	; 0x32
 8002294:	fba0 2303 	umull	r2, r3, r0, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800229e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	6821      	ldr	r1, [r4, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80022ac:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80022ae:	f7ff ffad 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 80022b2:	e7de      	b.n	8002272 <UART_SetConfig+0x46>
 80022b4:	40013800 	.word	0x40013800
 80022b8:	51eb851f 	.word	0x51eb851f

080022bc <HAL_UART_Init>:
  if (huart == NULL)
 80022bc:	b358      	cbz	r0, 8002316 <HAL_UART_Init+0x5a>
{
 80022be:	b510      	push	{r4, lr}
 80022c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80022c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022c6:	b30b      	cbz	r3, 800230c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	2324      	movs	r3, #36	; 0x24
 80022ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022ce:	6822      	ldr	r2, [r4, #0]
 80022d0:	68d3      	ldr	r3, [r2, #12]
 80022d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022d8:	4620      	mov	r0, r4
 80022da:	f7ff ffa7 	bl	800222c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	6913      	ldr	r3, [r2, #16]
 80022e2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022e6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e8:	6822      	ldr	r2, [r4, #0]
 80022ea:	6953      	ldr	r3, [r2, #20]
 80022ec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80022f0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80022f2:	6822      	ldr	r2, [r4, #0]
 80022f4:	68d3      	ldr	r3, [r2, #12]
 80022f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022fa:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	2000      	movs	r0, #0
 80022fe:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002300:	2320      	movs	r3, #32
 8002302:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002306:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800230a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800230c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002310:	f000 fbd4 	bl	8002abc <HAL_UART_MspInit>
 8002314:	e7d8      	b.n	80022c8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002316:	2001      	movs	r0, #1
}
 8002318:	4770      	bx	lr
	...

0800231c <Evita_travamento>:

	temp = (int16_t) (buffer[0] << 8 | buffer[1]);
	temp = temp / 340 + (int16_t) 36.53;
}*/

uint8_t Evita_travamento(uint32_t timer) {
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
	uint32_t timer2 = HAL_GetTick();
 8002320:	f7fe fa64 	bl	80007ec <HAL_GetTick>
	if ((timer2 - timer) < 50)
 8002324:	1b00      	subs	r0, r0, r4
 8002326:	2831      	cmp	r0, #49	; 0x31
 8002328:	d903      	bls.n	8002332 <Evita_travamento+0x16>
		return 1;
	else {
		_accel_ok = 0;
 800232a:	2000      	movs	r0, #0
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <Evita_travamento+0x1c>)
 800232e:	7018      	strb	r0, [r3, #0]
		return 0;
	}

}
 8002330:	bd10      	pop	{r4, pc}
		return 1;
 8002332:	2001      	movs	r0, #1
 8002334:	e7fc      	b.n	8002330 <Evita_travamento+0x14>
 8002336:	bf00      	nop
 8002338:	20000008 	.word	0x20000008

0800233c <SetupACEL>:
void SetupACEL(void) {
 800233c:	b510      	push	{r4, lr}
 800233e:	b084      	sub	sp, #16
	buffer[0] = 0;
 8002340:	4c38      	ldr	r4, [pc, #224]	; (8002424 <SetupACEL+0xe8>)
 8002342:	2300      	movs	r3, #0
 8002344:	7023      	strb	r3, [r4, #0]
	timer = HAL_GetTick();
 8002346:	f7fe fa51 	bl	80007ec <HAL_GetTick>
 800234a:	60a0      	str	r0, [r4, #8]
	while (HAL_I2C_Mem_Write(&hi2c1, (uint16_t) addressACEL << 1, MemAdd, 1,
 800234c:	2364      	movs	r3, #100	; 0x64
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2301      	movs	r3, #1
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	4a33      	ldr	r2, [pc, #204]	; (8002424 <SetupACEL+0xe8>)
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	226b      	movs	r2, #107	; 0x6b
 800235a:	21d0      	movs	r1, #208	; 0xd0
 800235c:	4832      	ldr	r0, [pc, #200]	; (8002428 <SetupACEL+0xec>)
 800235e:	f7ff fb83 	bl	8001a68 <HAL_I2C_Mem_Write>
 8002362:	b128      	cbz	r0, 8002370 <SetupACEL+0x34>
			buffer, 1, 100) != HAL_OK && Evita_travamento(timer)); //Desabilita o sleep mode do MPU
 8002364:	4b2f      	ldr	r3, [pc, #188]	; (8002424 <SetupACEL+0xe8>)
 8002366:	6898      	ldr	r0, [r3, #8]
 8002368:	f7ff ffd8 	bl	800231c <Evita_travamento>
 800236c:	2800      	cmp	r0, #0
 800236e:	d1ed      	bne.n	800234c <SetupACEL+0x10>
	buffer[0] = 0;
 8002370:	4c2c      	ldr	r4, [pc, #176]	; (8002424 <SetupACEL+0xe8>)
 8002372:	2300      	movs	r3, #0
 8002374:	7023      	strb	r3, [r4, #0]
	timer = HAL_GetTick();
 8002376:	f7fe fa39 	bl	80007ec <HAL_GetTick>
 800237a:	60a0      	str	r0, [r4, #8]
	while (HAL_I2C_Mem_Write(&hi2c1, (uint16_t) addressACEL << 1, MemAdd, 1,
 800237c:	2364      	movs	r3, #100	; 0x64
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	2301      	movs	r3, #1
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	4a27      	ldr	r2, [pc, #156]	; (8002424 <SetupACEL+0xe8>)
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	221b      	movs	r2, #27
 800238a:	21d0      	movs	r1, #208	; 0xd0
 800238c:	4826      	ldr	r0, [pc, #152]	; (8002428 <SetupACEL+0xec>)
 800238e:	f7ff fb6b 	bl	8001a68 <HAL_I2C_Mem_Write>
 8002392:	b128      	cbz	r0, 80023a0 <SetupACEL+0x64>
			buffer, 1, 100) != HAL_OK && Evita_travamento(timer)); //Configura o giroscopio com a sensibilidade de 250
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <SetupACEL+0xe8>)
 8002396:	6898      	ldr	r0, [r3, #8]
 8002398:	f7ff ffc0 	bl	800231c <Evita_travamento>
 800239c:	2800      	cmp	r0, #0
 800239e:	d1ed      	bne.n	800237c <SetupACEL+0x40>
	buffer[0] = 0;
 80023a0:	4c20      	ldr	r4, [pc, #128]	; (8002424 <SetupACEL+0xe8>)
 80023a2:	2300      	movs	r3, #0
 80023a4:	7023      	strb	r3, [r4, #0]
	timer = HAL_GetTick();
 80023a6:	f7fe fa21 	bl	80007ec <HAL_GetTick>
 80023aa:	60a0      	str	r0, [r4, #8]
	while (HAL_I2C_Mem_Write(&hi2c1, (uint16_t) addressACEL << 1, MemAdd, 1,
 80023ac:	2364      	movs	r3, #100	; 0x64
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	2301      	movs	r3, #1
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <SetupACEL+0xe8>)
 80023b6:	9200      	str	r2, [sp, #0]
 80023b8:	221c      	movs	r2, #28
 80023ba:	21d0      	movs	r1, #208	; 0xd0
 80023bc:	481a      	ldr	r0, [pc, #104]	; (8002428 <SetupACEL+0xec>)
 80023be:	f7ff fb53 	bl	8001a68 <HAL_I2C_Mem_Write>
 80023c2:	b128      	cbz	r0, 80023d0 <SetupACEL+0x94>
			buffer, 1, 100) != HAL_OK && Evita_travamento(timer)); //Configura o acelerometro com a sensibilidade de 4G
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <SetupACEL+0xe8>)
 80023c6:	6898      	ldr	r0, [r3, #8]
 80023c8:	f7ff ffa8 	bl	800231c <Evita_travamento>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d1ed      	bne.n	80023ac <SetupACEL+0x70>
	buffer[0] = 6;
 80023d0:	4c14      	ldr	r4, [pc, #80]	; (8002424 <SetupACEL+0xe8>)
 80023d2:	2306      	movs	r3, #6
 80023d4:	7023      	strb	r3, [r4, #0]
	timer = HAL_GetTick();
 80023d6:	f7fe fa09 	bl	80007ec <HAL_GetTick>
 80023da:	60a0      	str	r0, [r4, #8]
	while (HAL_I2C_Mem_Write(&hi2c1, (uint16_t) addressACEL << 1, MemAdd, 1,
 80023dc:	2364      	movs	r3, #100	; 0x64
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	2301      	movs	r3, #1
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <SetupACEL+0xe8>)
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	221a      	movs	r2, #26
 80023ea:	21d0      	movs	r1, #208	; 0xd0
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <SetupACEL+0xec>)
 80023ee:	f7ff fb3b 	bl	8001a68 <HAL_I2C_Mem_Write>
 80023f2:	b128      	cbz	r0, 8002400 <SetupACEL+0xc4>
			buffer, 1, 100) != HAL_OK && Evita_travamento(timer)); //Configura o low pass filter interno do MPU como 6Hz
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <SetupACEL+0xe8>)
 80023f6:	6898      	ldr	r0, [r3, #8]
 80023f8:	f7ff ff90 	bl	800231c <Evita_travamento>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1ed      	bne.n	80023dc <SetupACEL+0xa0>
	accelX = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SetupACEL+0xf0>)
 8002404:	8013      	strh	r3, [r2, #0]
	accelY = 0;
 8002406:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <SetupACEL+0xf4>)
 8002408:	8013      	strh	r3, [r2, #0]
	accelZ = 0;
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <SetupACEL+0xf8>)
 800240c:	8013      	strh	r3, [r2, #0]
	gyroX = 0;
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SetupACEL+0xfc>)
 8002410:	8013      	strh	r3, [r2, #0]
	gyroY = 0;
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SetupACEL+0x100>)
 8002414:	8013      	strh	r3, [r2, #0]
	gyroZ = 0;
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SetupACEL+0x104>)
 8002418:	8013      	strh	r3, [r2, #0]
	_accel_ok = 1;
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <SetupACEL+0x108>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
}
 8002420:	b004      	add	sp, #16
 8002422:	bd10      	pop	{r4, pc}
 8002424:	2000002c 	.word	0x2000002c
 8002428:	20000040 	.word	0x20000040
 800242c:	2000003e 	.word	0x2000003e
 8002430:	2000003c 	.word	0x2000003c
 8002434:	2000009a 	.word	0x2000009a
 8002438:	20000094 	.word	0x20000094
 800243c:	200000a0 	.word	0x200000a0
 8002440:	20000098 	.word	0x20000098
 8002444:	20000008 	.word	0x20000008

08002448 <recordAccelRegisters>:
void recordAccelRegisters() {
 8002448:	b530      	push	{r4, r5, lr}
 800244a:	b083      	sub	sp, #12
	_accel_ok = 1;
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <recordAccelRegisters+0xe0>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
	buffer[0] = 0x3B;
 8002452:	4c36      	ldr	r4, [pc, #216]	; (800252c <recordAccelRegisters+0xe4>)
 8002454:	233b      	movs	r3, #59	; 0x3b
 8002456:	7023      	strb	r3, [r4, #0]
	timer = HAL_GetTick();
 8002458:	f7fe f9c8 	bl	80007ec <HAL_GetTick>
 800245c:	60a0      	str	r0, [r4, #8]
	while (HAL_I2C_Master_Transmit(&hi2c1, (addressACEL << 1), buffer, 1, 100)
 800245e:	2364      	movs	r3, #100	; 0x64
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2301      	movs	r3, #1
 8002464:	4a31      	ldr	r2, [pc, #196]	; (800252c <recordAccelRegisters+0xe4>)
 8002466:	21d0      	movs	r1, #208	; 0xd0
 8002468:	4831      	ldr	r0, [pc, #196]	; (8002530 <recordAccelRegisters+0xe8>)
 800246a:	f7ff f8a1 	bl	80015b0 <HAL_I2C_Master_Transmit>
 800246e:	b128      	cbz	r0, 800247c <recordAccelRegisters+0x34>
			!= HAL_OK && Evita_travamento(timer)); //Inicializa a comunicacao com o registrador do acelerometro
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <recordAccelRegisters+0xe4>)
 8002472:	6898      	ldr	r0, [r3, #8]
 8002474:	f7ff ff52 	bl	800231c <Evita_travamento>
 8002478:	2800      	cmp	r0, #0
 800247a:	d1f0      	bne.n	800245e <recordAccelRegisters+0x16>
	timer = HAL_GetTick();
 800247c:	f7fe f9b6 	bl	80007ec <HAL_GetTick>
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <recordAccelRegisters+0xe4>)
 8002482:	6098      	str	r0, [r3, #8]
	while (HAL_I2C_Master_Receive(&hi2c1, (addressACEL << 1), buffer, 6, 100)
 8002484:	2364      	movs	r3, #100	; 0x64
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2306      	movs	r3, #6
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <recordAccelRegisters+0xe4>)
 800248c:	21d0      	movs	r1, #208	; 0xd0
 800248e:	4828      	ldr	r0, [pc, #160]	; (8002530 <recordAccelRegisters+0xe8>)
 8002490:	f7ff f94a 	bl	8001728 <HAL_I2C_Master_Receive>
 8002494:	b128      	cbz	r0, 80024a2 <recordAccelRegisters+0x5a>
			!= HAL_OK && Evita_travamento(timer)); //Recebe os dados do acelerometro
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <recordAccelRegisters+0xe4>)
 8002498:	6898      	ldr	r0, [r3, #8]
 800249a:	f7ff ff3f 	bl	800231c <Evita_travamento>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d1f0      	bne.n	8002484 <recordAccelRegisters+0x3c>
	accelX = (int16_t) (buffer[0] << 8 | buffer[1]); //buffer[0] == HSB **** buffer[1] == LSB de uma variavel de 16 bits
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <recordAccelRegisters+0xe4>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	7858      	ldrb	r0, [r3, #1]
 80024a8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	accelY = (int16_t) (buffer[2] << 8 | buffer[3]); //buffer[2] == HSB **** buffer[3] == LSB de uma variavel de 16 bits
 80024ac:	789a      	ldrb	r2, [r3, #2]
 80024ae:	78dc      	ldrb	r4, [r3, #3]
 80024b0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80024b4:	b224      	sxth	r4, r4
	accelZ = (int16_t) (buffer[4] << 8 | buffer[5]); //buffer[4] == HSB **** buffer[5] == LSB de uma variavel de 16 bits
 80024b6:	791a      	ldrb	r2, [r3, #4]
 80024b8:	795d      	ldrb	r5, [r3, #5]
 80024ba:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 80024be:	b22d      	sxth	r5, r5
	accelX = (accelX / 16384.0) * 1000;
 80024c0:	b200      	sxth	r0, r0
 80024c2:	f7fe f8bf 	bl	8000644 <__aeabi_i2d>
 80024c6:	2200      	movs	r2, #0
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <recordAccelRegisters+0xec>)
 80024ca:	f7fd fe3f 	bl	800014c <__aeabi_dmul>
 80024ce:	2200      	movs	r2, #0
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <recordAccelRegisters+0xf0>)
 80024d2:	f7fd fe3b 	bl	800014c <__aeabi_dmul>
 80024d6:	f7fe f91f 	bl	8000718 <__aeabi_d2iz>
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <recordAccelRegisters+0xf4>)
 80024dc:	8018      	strh	r0, [r3, #0]
	accelY = (accelY / 16384.0) * 1000;
 80024de:	4620      	mov	r0, r4
 80024e0:	f7fe f8b0 	bl	8000644 <__aeabi_i2d>
 80024e4:	2200      	movs	r2, #0
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <recordAccelRegisters+0xec>)
 80024e8:	f7fd fe30 	bl	800014c <__aeabi_dmul>
 80024ec:	2200      	movs	r2, #0
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <recordAccelRegisters+0xf0>)
 80024f0:	f7fd fe2c 	bl	800014c <__aeabi_dmul>
 80024f4:	f7fe f910 	bl	8000718 <__aeabi_d2iz>
 80024f8:	b204      	sxth	r4, r0
	accelZ = (accelZ / 16384.0) * 1000;
 80024fa:	4628      	mov	r0, r5
 80024fc:	f7fe f8a2 	bl	8000644 <__aeabi_i2d>
 8002500:	2200      	movs	r2, #0
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <recordAccelRegisters+0xec>)
 8002504:	f7fd fe22 	bl	800014c <__aeabi_dmul>
 8002508:	2200      	movs	r2, #0
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <recordAccelRegisters+0xf0>)
 800250c:	f7fd fe1e 	bl	800014c <__aeabi_dmul>
 8002510:	f7fe f902 	bl	8000718 <__aeabi_d2iz>
 8002514:	b200      	sxth	r0, r0
	accelY = accelY - 20;
 8002516:	3c14      	subs	r4, #20
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <recordAccelRegisters+0xf8>)
 800251a:	801c      	strh	r4, [r3, #0]
	accelZ = accelZ - 147;
 800251c:	3893      	subs	r0, #147	; 0x93
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <recordAccelRegisters+0xfc>)
 8002520:	8018      	strh	r0, [r3, #0]
}
 8002522:	b003      	add	sp, #12
 8002524:	bd30      	pop	{r4, r5, pc}
 8002526:	bf00      	nop
 8002528:	20000008 	.word	0x20000008
 800252c:	2000002c 	.word	0x2000002c
 8002530:	20000040 	.word	0x20000040
 8002534:	3f100000 	.word	0x3f100000
 8002538:	408f4000 	.word	0x408f4000
 800253c:	2000003e 	.word	0x2000003e
 8002540:	2000003c 	.word	0x2000003c
 8002544:	2000009a 	.word	0x2000009a

08002548 <recordGyroRegisters>:
void recordGyroRegisters(void) {
 8002548:	b510      	push	{r4, lr}
 800254a:	b082      	sub	sp, #8
	_accel_ok = 1;
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <recordGyroRegisters+0xb0>)
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
	buffer[0] = 0x43;
 8002552:	4c2a      	ldr	r4, [pc, #168]	; (80025fc <recordGyroRegisters+0xb4>)
 8002554:	2343      	movs	r3, #67	; 0x43
 8002556:	7023      	strb	r3, [r4, #0]
	timer = HAL_GetTick();
 8002558:	f7fe f948 	bl	80007ec <HAL_GetTick>
 800255c:	60a0      	str	r0, [r4, #8]
	while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) addressACEL << 1, buffer, 1, 100) != HAL_OK && Evita_travamento(timer));
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2301      	movs	r3, #1
 8002564:	4a25      	ldr	r2, [pc, #148]	; (80025fc <recordGyroRegisters+0xb4>)
 8002566:	21d0      	movs	r1, #208	; 0xd0
 8002568:	4825      	ldr	r0, [pc, #148]	; (8002600 <recordGyroRegisters+0xb8>)
 800256a:	f7ff f821 	bl	80015b0 <HAL_I2C_Master_Transmit>
 800256e:	b128      	cbz	r0, 800257c <recordGyroRegisters+0x34>
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <recordGyroRegisters+0xb4>)
 8002572:	6898      	ldr	r0, [r3, #8]
 8002574:	f7ff fed2 	bl	800231c <Evita_travamento>
 8002578:	2800      	cmp	r0, #0
 800257a:	d1f0      	bne.n	800255e <recordGyroRegisters+0x16>
	timer = HAL_GetTick();
 800257c:	f7fe f936 	bl	80007ec <HAL_GetTick>
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <recordGyroRegisters+0xb4>)
 8002582:	6098      	str	r0, [r3, #8]
	while (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) addressACEL << 1, buffer, 6, 100) != HAL_OK && Evita_travamento(timer));
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2306      	movs	r3, #6
 800258a:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <recordGyroRegisters+0xb4>)
 800258c:	21d0      	movs	r1, #208	; 0xd0
 800258e:	481c      	ldr	r0, [pc, #112]	; (8002600 <recordGyroRegisters+0xb8>)
 8002590:	f7ff f8ca 	bl	8001728 <HAL_I2C_Master_Receive>
 8002594:	b128      	cbz	r0, 80025a2 <recordGyroRegisters+0x5a>
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <recordGyroRegisters+0xb4>)
 8002598:	6898      	ldr	r0, [r3, #8]
 800259a:	f7ff febf 	bl	800231c <Evita_travamento>
 800259e:	2800      	cmp	r0, #0
 80025a0:	d1f0      	bne.n	8002584 <recordGyroRegisters+0x3c>
	gyroX = (int16_t) (buffer[0] << 8 | buffer[1]);
 80025a2:	4816      	ldr	r0, [pc, #88]	; (80025fc <recordGyroRegisters+0xb4>)
 80025a4:	7802      	ldrb	r2, [r0, #0]
 80025a6:	7843      	ldrb	r3, [r0, #1]
 80025a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025ac:	b21b      	sxth	r3, r3
	gyroY = (int16_t) (buffer[2] << 8 | buffer[3]);
 80025ae:	7882      	ldrb	r2, [r0, #2]
 80025b0:	78c1      	ldrb	r1, [r0, #3]
 80025b2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80025b6:	b209      	sxth	r1, r1
	gyroZ = (int16_t) (buffer[4] << 8 | buffer[5]);
 80025b8:	7904      	ldrb	r4, [r0, #4]
 80025ba:	7942      	ldrb	r2, [r0, #5]
 80025bc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80025c0:	b212      	sxth	r2, r2
	gyroX = (gyroX / 131);
 80025c2:	4810      	ldr	r0, [pc, #64]	; (8002604 <recordGyroRegisters+0xbc>)
 80025c4:	fb80 c403 	smull	ip, r4, r0, r3
 80025c8:	17db      	asrs	r3, r3, #31
 80025ca:	ebc3 1364 	rsb	r3, r3, r4, asr #5
 80025ce:	b21b      	sxth	r3, r3
	gyroY = (gyroY / 131);
 80025d0:	fb80 c401 	smull	ip, r4, r0, r1
 80025d4:	17c9      	asrs	r1, r1, #31
 80025d6:	ebc1 1164 	rsb	r1, r1, r4, asr #5
 80025da:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <recordGyroRegisters+0xc0>)
 80025dc:	8021      	strh	r1, [r4, #0]
	gyroZ = (gyroZ / 131);
 80025de:	fb80 1002 	smull	r1, r0, r0, r2
 80025e2:	17d2      	asrs	r2, r2, #31
 80025e4:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 80025e8:	4908      	ldr	r1, [pc, #32]	; (800260c <recordGyroRegisters+0xc4>)
 80025ea:	800a      	strh	r2, [r1, #0]
	gyroX = gyroX + 3;
 80025ec:	3303      	adds	r3, #3
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <recordGyroRegisters+0xc8>)
 80025f0:	8013      	strh	r3, [r2, #0]
}
 80025f2:	b002      	add	sp, #8
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008
 80025fc:	2000002c 	.word	0x2000002c
 8002600:	20000040 	.word	0x20000040
 8002604:	3e88cb3d 	.word	0x3e88cb3d
 8002608:	200000a0 	.word	0x200000a0
 800260c:	20000098 	.word	0x20000098
 8002610:	20000094 	.word	0x20000094

08002614 <Pisca_SOS>:

void Pisca_SOS(){ //Caso haja falha na conexão do IMU com a placa, o LED_DEBUG piscar S.O.S em código morse
 8002614:	b510      	push	{r4, lr}

	        	HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8002616:	4c50      	ldr	r4, [pc, #320]	; (8002758 <Pisca_SOS+0x144>)
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261e:	4620      	mov	r0, r4
 8002620:	f7fe fc50 	bl	8000ec4 <HAL_GPIO_WritePin>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002624:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002628:	4620      	mov	r0, r4
 800262a:	f7fe fc51 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800262e:	2032      	movs	r0, #50	; 0x32
 8002630:	f7fe f8e2 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002638:	4620      	mov	r0, r4
 800263a:	f7fe fc49 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800263e:	2032      	movs	r0, #50	; 0x32
 8002640:	f7fe f8da 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002648:	4620      	mov	r0, r4
 800264a:	f7fe fc41 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800264e:	2032      	movs	r0, #50	; 0x32
 8002650:	f7fe f8d2 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002658:	4620      	mov	r0, r4
 800265a:	f7fe fc39 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800265e:	2032      	movs	r0, #50	; 0x32
 8002660:	f7fe f8ca 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002668:	4620      	mov	r0, r4
 800266a:	f7fe fc31 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800266e:	2032      	movs	r0, #50	; 0x32
 8002670:	f7fe f8c2 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002678:	4620      	mov	r0, r4
 800267a:	f7fe fc29 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800267e:	2032      	movs	r0, #50	; 0x32
 8002680:	f7fe f8ba 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002688:	4620      	mov	r0, r4
 800268a:	f7fe fc21 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 800268e:	20a7      	movs	r0, #167	; 0xa7
 8002690:	f7fe f8b2 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002698:	4620      	mov	r0, r4
 800269a:	f7fe fc19 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 800269e:	20a7      	movs	r0, #167	; 0xa7
 80026a0:	f7fe f8aa 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80026a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7fe fc11 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 80026ae:	20a7      	movs	r0, #167	; 0xa7
 80026b0:	f7fe f8a2 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80026b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7fe fc09 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 80026be:	20a7      	movs	r0, #167	; 0xa7
 80026c0:	f7fe f89a 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80026c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7fe fc01 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 80026ce:	20a7      	movs	r0, #167	; 0xa7
 80026d0:	f7fe f892 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80026d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d8:	4620      	mov	r0, r4
 80026da:	f7fe fbf9 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 80026de:	20a7      	movs	r0, #167	; 0xa7
 80026e0:	f7fe f88a 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80026e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7fe fbf1 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(167);
 80026ee:	20a7      	movs	r0, #167	; 0xa7
 80026f0:	f7fe f882 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80026f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7fe fbe9 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 80026fe:	2032      	movs	r0, #50	; 0x32
 8002700:	f7fe f87a 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002708:	4620      	mov	r0, r4
 800270a:	f7fe fbe1 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800270e:	2032      	movs	r0, #50	; 0x32
 8002710:	f7fe f872 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002718:	4620      	mov	r0, r4
 800271a:	f7fe fbd9 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800271e:	2032      	movs	r0, #50	; 0x32
 8002720:	f7fe f86a 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002728:	4620      	mov	r0, r4
 800272a:	f7fe fbd1 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800272e:	2032      	movs	r0, #50	; 0x32
 8002730:	f7fe f862 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002738:	4620      	mov	r0, r4
 800273a:	f7fe fbc9 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800273e:	2032      	movs	r0, #50	; 0x32
 8002740:	f7fe f85a 	bl	80007f8 <HAL_Delay>
	        	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8002744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002748:	4620      	mov	r0, r4
 800274a:	f7fe fbc1 	bl	8000ed0 <HAL_GPIO_TogglePin>
	        	HAL_Delay(50);
 800274e:	2032      	movs	r0, #50	; 0x32
 8002750:	f7fe f852 	bl	80007f8 <HAL_Delay>

}
 8002754:	bd10      	pop	{r4, pc}
 8002756:	bf00      	nop
 8002758:	40011000 	.word	0x40011000

0800275c <Checa_leitura>:


uint8_t Checa_leitura() {
	return !_accel_ok;
 800275c:	4b02      	ldr	r3, [pc, #8]	; (8002768 <Checa_leitura+0xc>)
 800275e:	7818      	ldrb	r0, [r3, #0]


}
 8002760:	fab0 f080 	clz	r0, r0
 8002764:	0940      	lsrs	r0, r0, #5
 8002766:	4770      	bx	lr
 8002768:	20000008 	.word	0x20000008

0800276c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800276c:	b508      	push	{r3, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800276e:	480d      	ldr	r0, [pc, #52]	; (80027a4 <MX_CAN_Init+0x38>)
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <MX_CAN_Init+0x3c>)
 8002772:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 8002774:	2309      	movs	r3, #9
 8002776:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002778:	2300      	movs	r3, #0
 800277a:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800277c:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800277e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002782:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002784:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002786:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002788:	2201      	movs	r2, #1
 800278a:	7642      	strb	r2, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800278c:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800278e:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002790:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002792:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002794:	f7fe f844 	bl	8000820 <HAL_CAN_Init>
 8002798:	b900      	cbnz	r0, 800279c <MX_CAN_Init+0x30>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800279a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800279c:	f000 f932 	bl	8002a04 <Error_Handler>
}
 80027a0:	e7fb      	b.n	800279a <MX_CAN_Init+0x2e>
 80027a2:	bf00      	nop
 80027a4:	200000cc 	.word	0x200000cc
 80027a8:	40006400 	.word	0x40006400

080027ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80027ac:	b530      	push	{r4, r5, lr}
 80027ae:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	2300      	movs	r3, #0
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	9303      	str	r3, [sp, #12]
 80027b6:	9304      	str	r3, [sp, #16]
 80027b8:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 80027ba:	6802      	ldr	r2, [r0, #0]
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_CAN_MspInit+0x90>)
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80027c2:	b007      	add	sp, #28
 80027c4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027c6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80027d0:	61da      	str	r2, [r3, #28]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80027d8:	9200      	str	r2, [sp, #0]
 80027da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	f042 0204 	orr.w	r2, r2, #4
 80027e2:	619a      	str	r2, [r3, #24]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f4:	2400      	movs	r4, #0
 80027f6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	4d11      	ldr	r5, [pc, #68]	; (8002840 <HAL_CAN_MspInit+0x94>)
 80027fc:	a902      	add	r1, sp, #8
 80027fe:	4628      	mov	r0, r5
 8002800:	f7fe fa50 	bl	8000ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800280e:	2303      	movs	r3, #3
 8002810:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	a902      	add	r1, sp, #8
 8002814:	4628      	mov	r0, r5
 8002816:	f7fe fa45 	bl	8000ca4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800281a:	4622      	mov	r2, r4
 800281c:	4621      	mov	r1, r4
 800281e:	2013      	movs	r0, #19
 8002820:	f7fe f9e8 	bl	8000bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8002824:	2013      	movs	r0, #19
 8002826:	f7fe fa19 	bl	8000c5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800282a:	4622      	mov	r2, r4
 800282c:	4621      	mov	r1, r4
 800282e:	2014      	movs	r0, #20
 8002830:	f7fe f9e0 	bl	8000bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002834:	2014      	movs	r0, #20
 8002836:	f7fe fa11 	bl	8000c5c <HAL_NVIC_EnableIRQ>
}
 800283a:	e7c2      	b.n	80027c2 <HAL_CAN_MspInit+0x16>
 800283c:	40006400 	.word	0x40006400
 8002840:	40010800 	.word	0x40010800

08002844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002844:	b530      	push	{r4, r5, lr}
 8002846:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	2400      	movs	r4, #0
 800284a:	9404      	str	r4, [sp, #16]
 800284c:	9405      	str	r4, [sp, #20]
 800284e:	9406      	str	r4, [sp, #24]
 8002850:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <MX_GPIO_Init+0x84>)
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	f042 0210 	orr.w	r2, r2, #16
 800285a:	619a      	str	r2, [r3, #24]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	f002 0210 	and.w	r2, r2, #16
 8002862:	9200      	str	r2, [sp, #0]
 8002864:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	f042 0220 	orr.w	r2, r2, #32
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	f002 0220 	and.w	r2, r2, #32
 8002874:	9201      	str	r2, [sp, #4]
 8002876:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	f042 0204 	orr.w	r2, r2, #4
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	f002 0204 	and.w	r2, r2, #4
 8002886:	9202      	str	r2, [sp, #8]
 8002888:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	9303      	str	r3, [sp, #12]
 800289a:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 800289c:	4d0b      	ldr	r5, [pc, #44]	; (80028cc <MX_GPIO_Init+0x88>)
 800289e:	4622      	mov	r2, r4
 80028a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028a4:	4628      	mov	r0, r5
 80028a6:	f7fe fb0d 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 80028aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2302      	movs	r3, #2
 80028b8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 80028ba:	a904      	add	r1, sp, #16
 80028bc:	4628      	mov	r0, r5
 80028be:	f7fe f9f1 	bl	8000ca4 <HAL_GPIO_Init>

}
 80028c2:	b009      	add	sp, #36	; 0x24
 80028c4:	bd30      	pop	{r4, r5, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40011000 	.word	0x40011000

080028d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028d0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028d2:	480b      	ldr	r0, [pc, #44]	; (8002900 <MX_I2C1_Init+0x30>)
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <MX_I2C1_Init+0x34>)
 80028d6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <MX_I2C1_Init+0x38>)
 80028da:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028dc:	2300      	movs	r3, #0
 80028de:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028e0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ea:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ec:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ee:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028f0:	f7fe fd80 	bl	80013f4 <HAL_I2C_Init>
 80028f4:	b900      	cbnz	r0, 80028f8 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028f6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80028f8:	f000 f884 	bl	8002a04 <Error_Handler>
}
 80028fc:	e7fb      	b.n	80028f6 <MX_I2C1_Init+0x26>
 80028fe:	bf00      	nop
 8002900:	20000040 	.word	0x20000040
 8002904:	40005400 	.word	0x40005400
 8002908:	000186a0 	.word	0x000186a0

0800290c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800290c:	b510      	push	{r4, lr}
 800290e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	2300      	movs	r3, #0
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	9303      	str	r3, [sp, #12]
 8002916:	9304      	str	r3, [sp, #16]
 8002918:	9305      	str	r3, [sp, #20]
  if(i2cHandle->Instance==I2C1)
 800291a:	6802      	ldr	r2, [r0, #0]
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_I2C_MspInit+0x58>)
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002922:	b006      	add	sp, #24
 8002924:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	4c10      	ldr	r4, [pc, #64]	; (8002968 <HAL_I2C_MspInit+0x5c>)
 8002928:	69a3      	ldr	r3, [r4, #24]
 800292a:	f043 0308 	orr.w	r3, r3, #8
 800292e:	61a3      	str	r3, [r4, #24]
 8002930:	69a3      	ldr	r3, [r4, #24]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800293a:	23c0      	movs	r3, #192	; 0xc0
 800293c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800293e:	2312      	movs	r3, #18
 8002940:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	a902      	add	r1, sp, #8
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <HAL_I2C_MspInit+0x60>)
 800294a:	f7fe f9ab 	bl	8000ca4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800294e:	69e3      	ldr	r3, [r4, #28]
 8002950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002954:	61e3      	str	r3, [r4, #28]
 8002956:	69e3      	ldr	r3, [r4, #28]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	9b01      	ldr	r3, [sp, #4]
}
 8002960:	e7df      	b.n	8002922 <HAL_I2C_MspInit+0x16>
 8002962:	bf00      	nop
 8002964:	40005400 	.word	0x40005400
 8002968:	40021000 	.word	0x40021000
 800296c:	40010c00 	.word	0x40010c00

08002970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002970:	b530      	push	{r4, r5, lr}
 8002972:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002974:	2400      	movs	r4, #0
 8002976:	9409      	str	r4, [sp, #36]	; 0x24
 8002978:	940b      	str	r4, [sp, #44]	; 0x2c
 800297a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800297c:	9401      	str	r4, [sp, #4]
 800297e:	9402      	str	r4, [sp, #8]
 8002980:	9403      	str	r4, [sp, #12]
 8002982:	9404      	str	r4, [sp, #16]
 8002984:	9405      	str	r4, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002986:	2201      	movs	r2, #1
 8002988:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800298a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002990:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002992:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002994:	2502      	movs	r5, #2
 8002996:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002998:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800299a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800299e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a0:	a806      	add	r0, sp, #24
 80029a2:	f7ff f929 	bl	8001bf8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a6:	230f      	movs	r3, #15
 80029a8:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029aa:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ac:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b4:	9405      	str	r4, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b6:	4629      	mov	r1, r5
 80029b8:	a801      	add	r0, sp, #4
 80029ba:	f7ff fb5b 	bl	8002074 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80029be:	b011      	add	sp, #68	; 0x44
 80029c0:	bd30      	pop	{r4, r5, pc}

080029c2 <main>:
{
 80029c2:	b508      	push	{r3, lr}
  HAL_Init();
 80029c4:	f7fd fef4 	bl	80007b0 <HAL_Init>
  SystemClock_Config();
 80029c8:	f7ff ffd2 	bl	8002970 <SystemClock_Config>
  MX_GPIO_Init();
 80029cc:	f7ff ff3a 	bl	8002844 <MX_GPIO_Init>
  MX_CAN_Init();
 80029d0:	f7ff fecc 	bl	800276c <MX_CAN_Init>
  MX_I2C1_Init();
 80029d4:	f7ff ff7c 	bl	80028d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80029d8:	f000 f856 	bl	8002a88 <MX_USART1_UART_Init>
  HAL_Delay(500);
 80029dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029e0:	f7fd ff0a 	bl	80007f8 <HAL_Delay>
  SetupACEL();
 80029e4:	f7ff fcaa 	bl	800233c <SetupACEL>
 80029e8:	e003      	b.n	80029f2 <main+0x30>
		 Pisca_SOS();
 80029ea:	f7ff fe13 	bl	8002614 <Pisca_SOS>
		 SetupACEL();
 80029ee:	f7ff fca5 	bl	800233c <SetupACEL>
	 recordAccelRegisters();
 80029f2:	f7ff fd29 	bl	8002448 <recordAccelRegisters>
	 recordGyroRegisters();
 80029f6:	f7ff fda7 	bl	8002548 <recordGyroRegisters>
	 if(Checa_leitura()){
 80029fa:	f7ff feaf 	bl	800275c <Checa_leitura>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d0f7      	beq.n	80029f2 <main+0x30>
 8002a02:	e7f2      	b.n	80029ea <main+0x28>

08002a04 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_MspInit+0x3c>)
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	f002 0201 	and.w	r2, r2, #1
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a24:	61da      	str	r2, [r3, #28]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a30:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <HAL_MspInit+0x40>)
 8002a32:	6853      	ldr	r3, [r2, #4]
 8002a34:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3e:	b002      	add	sp, #8
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40010000 	.word	0x40010000

08002a4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a4c:	4770      	bx	lr

08002a4e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <HardFault_Handler>

08002a50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <MemManage_Handler>

08002a52 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a52:	e7fe      	b.n	8002a52 <BusFault_Handler>

08002a54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <UsageFault_Handler>

08002a56 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a56:	4770      	bx	lr

08002a58 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	4770      	bx	lr

08002a5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5a:	4770      	bx	lr

08002a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5e:	f7fd feb9 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a62:	bd08      	pop	{r3, pc}

08002a64 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002a66:	4802      	ldr	r0, [pc, #8]	; (8002a70 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8002a68:	f7fd ff8d 	bl	8000986 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002a6c:	bd08      	pop	{r3, pc}
 8002a6e:	bf00      	nop
 8002a70:	200000cc 	.word	0x200000cc

08002a74 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002a76:	4802      	ldr	r0, [pc, #8]	; (8002a80 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8002a78:	f7fd ff85 	bl	8000986 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002a7c:	bd08      	pop	{r3, pc}
 8002a7e:	bf00      	nop
 8002a80:	200000cc 	.word	0x200000cc

08002a84 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a84:	4770      	bx	lr
	...

08002a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a88:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a8a:	480a      	ldr	r0, [pc, #40]	; (8002ab4 <MX_USART1_UART_Init+0x2c>)
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <MX_USART1_UART_Init+0x30>)
 8002a8e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002a90:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002a94:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	2300      	movs	r3, #0
 8002a98:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a9a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a9c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aa6:	f7ff fc09 	bl	80022bc <HAL_UART_Init>
 8002aaa:	b900      	cbnz	r0, 8002aae <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aac:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002aae:	f7ff ffa9 	bl	8002a04 <Error_Handler>
}
 8002ab2:	e7fb      	b.n	8002aac <MX_USART1_UART_Init+0x24>
 8002ab4:	2000013c 	.word	0x2000013c
 8002ab8:	40013800 	.word	0x40013800

08002abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002abc:	b510      	push	{r4, lr}
 8002abe:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9302      	str	r3, [sp, #8]
 8002ac4:	9303      	str	r3, [sp, #12]
 8002ac6:	9304      	str	r3, [sp, #16]
 8002ac8:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8002aca:	6802      	ldr	r2, [r0, #0]
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_UART_MspInit+0x70>)
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ae8:	9200      	str	r2, [sp, #0]
 8002aea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	f042 0204 	orr.w	r2, r2, #4
 8002af2:	619a      	str	r2, [r3, #24]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	4c08      	ldr	r4, [pc, #32]	; (8002b30 <HAL_UART_MspInit+0x74>)
 8002b0e:	a902      	add	r1, sp, #8
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7fe f8c7 	bl	8000ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	a902      	add	r1, sp, #8
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7fe f8bd 	bl	8000ca4 <HAL_GPIO_Init>
}
 8002b2a:	e7d2      	b.n	8002ad2 <HAL_UART_MspInit+0x16>
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40010800 	.word	0x40010800

08002b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b36:	e003      	b.n	8002b40 <LoopCopyDataInit>

08002b38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b3e:	3104      	adds	r1, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b40:	480a      	ldr	r0, [pc, #40]	; (8002b6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b48:	d3f6      	bcc.n	8002b38 <CopyDataInit>
  ldr r2, =_sbss
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b4c:	e002      	b.n	8002b54 <LoopFillZerobss>

08002b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b50:	f842 3b04 	str.w	r3, [r2], #4

08002b54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b58:	d3f9      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b5a:	f7ff ff93 	bl	8002a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5e:	f000 f80f 	bl	8002b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b62:	f7ff ff2e 	bl	80029c2 <main>
  bx lr
 8002b66:	4770      	bx	lr
  ldr r3, =_sidata
 8002b68:	08002c14 	.word	0x08002c14
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b70:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002b74:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002b78:	2000017c 	.word	0x2000017c

08002b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC1_2_IRQHandler>
	...

08002b80 <__libc_init_array>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	2600      	movs	r6, #0
 8002b84:	4d0c      	ldr	r5, [pc, #48]	; (8002bb8 <__libc_init_array+0x38>)
 8002b86:	4c0d      	ldr	r4, [pc, #52]	; (8002bbc <__libc_init_array+0x3c>)
 8002b88:	1b64      	subs	r4, r4, r5
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	42a6      	cmp	r6, r4
 8002b8e:	d109      	bne.n	8002ba4 <__libc_init_array+0x24>
 8002b90:	f000 f81a 	bl	8002bc8 <_init>
 8002b94:	2600      	movs	r6, #0
 8002b96:	4d0a      	ldr	r5, [pc, #40]	; (8002bc0 <__libc_init_array+0x40>)
 8002b98:	4c0a      	ldr	r4, [pc, #40]	; (8002bc4 <__libc_init_array+0x44>)
 8002b9a:	1b64      	subs	r4, r4, r5
 8002b9c:	10a4      	asrs	r4, r4, #2
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d105      	bne.n	8002bae <__libc_init_array+0x2e>
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba8:	4798      	blx	r3
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7ee      	b.n	8002b8c <__libc_init_array+0xc>
 8002bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb2:	4798      	blx	r3
 8002bb4:	3601      	adds	r6, #1
 8002bb6:	e7f2      	b.n	8002b9e <__libc_init_array+0x1e>
 8002bb8:	08002c0c 	.word	0x08002c0c
 8002bbc:	08002c0c 	.word	0x08002c0c
 8002bc0:	08002c0c 	.word	0x08002c0c
 8002bc4:	08002c10 	.word	0x08002c10

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
